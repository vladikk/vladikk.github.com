<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vladikk]]></title>
  <link href="http://www.vladikk.com/atom.xml" rel="self"/>
  <link href="http://www.vladikk.com/"/>
  <updated>2017-03-20T16:01:09+02:00</updated>
  <id>http://www.vladikk.com/</id>
  <author>
    <name><![CDATA[Vladik Khononov]]></name>
    <email><![CDATA[vladik@khononov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tackling Complexity in CQRS]]></title>
    <link href="http://www.vladikk.com/2017/03/20/tackling-complexity-in-cqrs/"/>
    <updated>2017-03-20T20:37:00+02:00</updated>
    <id>http://www.vladikk.com/2017/03/20/tackling-complexity-in-cqrs</id>
    <content type="html"><![CDATA[<p><img src="http://www.vladikk.com/images/cqrs/title-img.jpg" alt="Tackling Complexity in CQRS" /></p>

<p>The CQRS pattern can do wonders: it can maximize scalability, performance, security, and it can even <a href="http://codebetter.com/gregyoung/2010/02/20/cqrs-and-cap-theorem/">“beat” the CAP theorem</a>. Nonetheless, CQRS gained itself a controversial name because of the complexity it introduces. For instance, <a href="https://martinfowler.com/bliki/CQRS.html">in his article on CQRS</a>, Martin Fowler argues that the pattern should be applied sparingly and even cautiously:</p>

<ul>
<li>“… for most systems CQRS adds risky complexity”</li>
<li>“… you should be very cautious about using CQRS”</li>
<li>“So while CQRS is a pattern that&#8217;s good to have in the toolbox, beware that it is difficult to use well and you can easily chop off important bits if you mishandle it.”</li>
</ul>


<p>From my point of view, the CQRS induced complexity is largely accidental, and thus can be avoided. To illustrate my point, I want to discuss the goal of CQRS, and then analyze 3 common sources of accidental complexities in CQRS based systems.</p>

<!-- more -->


<h2>The Goal of CQRS</h2>

<p>The goal of CQRS is to enable representation of the same data using multiple models. Not scalability, not availability, not security, not performance. Same data in multiple models. That&#8217;s it. The rest is byproducts. Don&#8217;t believe me? - Listen to <a href="https://youtu.be/LDW0QWie21s?t=448">Greg Young&#8217;s talk at the DDDEU2016 conference</a>, where he says that CQRS was invented to support implementation of Event Sourcing, and as you probably know, the Event Sourcing model is awesome for writing data, but terrible for reading. That&#8217;s why he needed CQRS back then: <em>to represent the same data in multiple models</em>.</p>

<p>Let’s see how this understanding can help us tackle some complexities.</p>

<h2>Complexity Trap #1: One-Way Commands, or Overzealous Segregation</h2>

<p>All definitions of CQRS that I&#8217;m aware of are following this pattern:</p>

<ol>
<li>CQRS is based on the CQS principle, which states that operations(?) should be divided into two groups: commands, that change data, and queries that return data. Once we elevate this principle to the architectural level, we get a system with use-cases segregated into same two groups: commands and queries. Each use-case can be either command or query, but never both.</li>
<li>Once the use-cases are segregated, we get quite a few benefits: multiple models, different persistence mechanisms, independent scalability, etc.</li>
</ol>


<p>Do you sense that something is wrong here? The issue is a subtle one: all definitions of CQRS usually start with the solution — the segregation, and only afterwards define the problem — multiple models. This causes too much zeal about the segregation: going as far as defining commands as one-way, where you get Ack/Nack response from the server, but have to poll some read model store for the actual command execution result. In other words, complexity hell unleashed.</p>

<h3>Solution: Relax the Segregation</h3>

<p>Let’s take a step back, and reconsider the segregation. We’ve seen that, according to CQRS, in order to represent the same data in multiple models, a use case can either write or read data. It’s a no-brainer that a read model shouldn’t update anything, since otherwise we’d end up with multiple sources of truth. But should you really keep your commands void? - Not really.</p>

<p>Without violating any principles, a command can safely return the following data:</p>

<ul>
<li>Execution result - success / failure</li>
<li>Error messages or validation errors, in case of a failure</li>
<li>The aggregate’s new version number, in case of success</li>
</ul>


<p>This information will dramatically improve the user experience of your system:</p>

<ul>
<li>You don’t have to poll an external source for command execution result, you have it right away. It becomes trivial to validate commands, and to return error messages</li>
<li>If you want to refresh the displayed data, you can use the aggregate’s new version to determine wether the view model reflects the executed command or not. No more displaying stale data</li>
</ul>


<p>Speaking of data, can we relax the segregation even a bit more? In many cases, any data contained <em>inside</em> of the affected aggregate, can be returned as part of the command execution result. However, there is a slight nuance here: make sure that the returned data can be queried later on from one of the read models. Otherwise there is a slight risk that the data might get lost, in case the response doesn&#8217;t make its way to the client.</p>

<p>You can see an example of such approach in <a href="http://danielwhittaker.me/2016/04/20/how-to-validate-commands-in-a-cqrs-application/">Daniel Whittaker&#8217;s blog</a>, where he discusses usage of command execution object for validation of commands.</p>

<p>Also, in this <a href="https://gist.github.com/vladikk/86da55d0eb09d7a291b9f9a5b406f2c9">gist</a> you can see the command execution result object that I use in C#.</p>

<h2>Complexity Trap #2: Event sourcing</h2>

<p>Due to historical reasons, CQRS is closely associated with the Event Sourcing pattern. After all, CQRS was invented to make Event Sourcing possible. But let’s re-evalute the coupling between the two patterns.</p>

<p>As I’ve said before, the goal of CQRS is to allow representation of the same data in different models. If you’re working with an Event Sourced Domain Model, you absolutely need CQRS to be able to execute queries. However, there are lots of other perfectly valid reasons to implement CQRS, not related to Event Sourcing:</p>

<ul>
<li>Your system should display its entities in different representation models</li>
<li>You have to support different querying models (search, graph, documents, etc.)</li>
<li>The difference between writes and reads differs greatly, and you want to scale them independently</li>
<li>You hate O/RMs</li>
</ul>


<p>Does it mean that in all these cases you have to go down the Event Sourcing route? If you do, you’re deep down in a complexity trap. Event Sourcing is a way of modeling business domains. Not just a way, but probably the most complex way. Therefore, you should employ Event Sourcing if, and only if, your business domain justifies it. Let&#8217;s see how you can implement CQRS in other cases.</p>

<h3>Solution: CQRS != Event Sourcing</h3>

<p>We’ve been taught to generate projections by writing handlers for events. But how do you implement projections without events? There is another way of doing projections, and I call it “State Based Projections”. This is a topic for a post of its own, but I’ll describe briefly three ways of implementing “State Based Projections”:</p>

<h4>1. “Is Dirty” Flag</h4>

<p>You can mark an entity that was updated by raising IsDirty flag, and implement a projection engine that will query for dirty instances and project the updated data into distinct models. To rebuild projections, you just have to raise the flag back for all records.</p>

<h4>2. Catch-Up</h4>

<p>In relational databases you can track commits on the table level. For example, in Sql Server you have a built in mechanism for that, the <a href="https://msdn.microsoft.com/en-us/library/ms182776.aspx">“rowversion” column</a>. Such functionality can be implemented for other relational databases as well. A projection engine will query updated rows in a catch-up subscription like way, and project the updated data. To rebuild a projection from scratch, you have to &#8220;rollback&#8221; the last known commit id back to 0.</p>

<h4>3. Database Views</h4>

<p>If you use a relational database, and all you need is to represent its data in different models, database views will work great. Yep, perfectly valid CQRS system can be implemented in the database. Probably the unsexiest solution, but not only it works, it also naturally follows the CQRS pattern.</p>

<p>These ways of projecting models may not be cool and sexy, but they do work. I’ve seen quite a few projects employing them, and they worked like a charm, without unjustifiably drowning in Event Sourcing related complexity.</p>

<h2>Complexity Trap #3: Too Much of a Good Thing</h2>

<p>The Microservices hype has attracted lots of attention to CQRS: if you have a set of independent services that need to query each other’s data, <a href="https://www.ibm.com/developerworks/cloud/library/cl-build-app-using-microservices-and-cqrs-trs/">CQRS is the common solution</a>. However, I’ve seen this approach producing monstrous data flow diagrams of services projecting lots of data between them.</p>

<p><img src="http://www.vladikk.com/images/cqrs/microservices.jpg" alt="Fine grained microservices" /></p>

<p>This is not always bad, but in many cases this might be a signal to take step back and reconsider your decomposition strategy. Chances are that your services are too fine grained, and do not reflect business domain’s boundaries. If this is the case, you can reduce your architecture’s complexity greatly by realigning services boundaries with their corresponding business domains.</p>

<h2>CQRS: Decomplexified</h2>

<p>I want to sum it all up by drawing a diagram of the CQRS pattern:</p>

<p><img src="http://www.vladikk.com/images/cqrs/cqrs-diagram.png" alt="CQRS diagram" /></p>

<p>This diagram differs greatly from other diagrams you can find, if you google for “CQRS diagram”:</p>

<p><img src="http://www.vladikk.com/images/cqrs/google-cqrs.png" alt="Other CQRS diagrams" /></p>

<p>This is is the CQRS pattern the way I see and implement it. Use it if you need to represent entities in different models. Don&#8217;t cripple your architecture with one-way commands. Use separate storage mechanisms for the write and read models only if one won’t do. Project using events only if your business domain justifies usage of Event Sourcing, in other case use state based projections.</p>

<p>As every correctly applied tool, CQRS should reduce complexity, not induce it. If your architecture’s complexity grows, you’re doing something wrong.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQS Exactly-Once Processing is a Hoax]]></title>
    <link href="http://www.vladikk.com/2016/11/20/sqs-fifo/"/>
    <updated>2016-11-20T21:20:00+02:00</updated>
    <id>http://www.vladikk.com/2016/11/20/sqs-fifo</id>
    <content type="html"><![CDATA[<p>Dear AWS,</p>

<p>Love you to death, but your recent announcement of <a href="https://aws.amazon.com/about-aws/whats-new/2016/11/amazon-sqs-introduces-fifo-queues-with-exactly-once-processing-and-lower-prices-for-standard-queues/">FIFO Queues with Exactly-Once Processing</a> is not only misleading – it’s also harmful. I&#8217;ve instructed everyone at our company to ignore this announcement and use the standard queues instead. Let me tell you why.</p>

<h2>SQS Message Processing Model</h2>

<p>The process of working with messages in SQS queues follows the following 3 steps:</p>

<ol>
<li>Dequeue a message</li>
<li>Process the message</li>
<li>Delete the message</li>
</ol>


<p>With the recent announcement, Step 1, the dequeueing of a message, can no longer return the same message more than once. Also, it should return the messages strictly in the order they were received. This is definitely a step up, but it is not enough. Let’s consider the following two cases.</p>

<!-- more -->


<h3>Message Processing Fails</h3>

<p>This is actually a simple one. Let’s say your message processing code strongly depends on message ordering. After a message was dequeued, its processing has failed, and the operation should be retried. What will happen until the visibility timeout of the messages expires? - The messages that came <em>after</em> it will be <em>dequeued in the meantime</em>. Therefore, if you depend on ordering, you&#8217;d better make sure your message processing code is ready to handle this scenario.</p>

<h3>Message Deletion Fails</h3>

<p>Now, let’s say a message was processed successfully (Step 2), but just before the delete message call (Step 3), the process failed. It failed for whatever reason – there was a network outage, or the cleaning lady pulled the plug. What will happen after the visibility timeout for the message expires? The very same message will be <em>dequeued again</em>, and it will be <em>processed again</em>. Therefore, the message deduplication code in the message-processing transaction should take care of this scenario, whether the SQS queue is a good ol’ one or a shiny new FIFO queue.</p>

<h2>Bottom Line</h2>

<p>As I&#8217;ve just shown you, even if SQS returns every message exactly once, and in perfect order, message duplication and reordering can still occur due to the nature of distributed systems. Therefore, I strongly encourage you to ignore SQS FIFO queues, and instead use the standard SQS queues. They are cheaper, not limited, and most importantly, they make the limitations of distributed systems explicit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding Proper Scopes for Unit Tests]]></title>
    <link href="http://www.vladikk.com/2016/06/29/test-scopes/"/>
    <updated>2016-06-29T21:47:00+03:00</updated>
    <id>http://www.vladikk.com/2016/06/29/test-scopes</id>
    <content type="html"><![CDATA[<p>In my previous <strike>rant</strike> <a href="http://vladikk.com/2016/01/22/tdd-what-went-wrong/">post on TDD</a> I’ve argued that the majority of the problems many experience doing TDD are caused by testing in too narrow scopes - using classes as units of testability, instead of functional use cases. However, widening the scope of the test too much is just another extreme. So how one finds the sweet spot? In this post I’d like to share the heuristic that I use.</p>

<h2>Cyclomatic Complexity</h2>

<p>Cyclomatic complexity is a software metric, used to indicate the complexity of a program. We can use this measurement to measure the complexity of a class or a method, and choose a suitable testing strategy. <!-- more --> If the cyclomatic complexity is too high for the testing unit, the testing scope is too wide, and should be narrowed. This heuristic may sound easy in theory, but its no picnic to verify it in practice. Luckily, there are tools that were invented for that kind of heavy lifting. Enter <a href="http://www.ndepend.com/">NDepend</a>.</p>

<h2>Automatically Testing Test Scopes</h2>

<p><a href="http://www.ndepend.com/">NDepend</a> is an excellent static analysis tool for the .Net platform. In addition to the abundance of built in tests, NDepend allows writing custom queries to check code quality. The following is an example of a CQL query that returns test methods with a scope that should narrowed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">from</span> <span class="n">m</span> <span class="k">in</span> <span class="n">JustMyCode</span><span class="p">.</span><span class="n">Methods</span>
</span><span class='line'><span class="k">where</span>  <span class="n">m</span><span class="p">.</span><span class="n">CyclomaticComplexity</span> <span class="p">&gt;</span> <span class="m">30</span> <span class="p">||</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILCyclomaticComplexity</span> <span class="p">&gt;</span> <span class="m">60</span> <span class="p">||</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILNestingDepth</span> <span class="p">&gt;</span> <span class="m">6</span>
</span><span class='line'><span class="n">let</span> <span class="n">indirectTestTypes</span> <span class="p">=</span> <span class="n">m</span><span class="p">.</span><span class="n">MethodsCallingMe</span>
</span><span class='line'>      <span class="p">.</span><span class="n">FillIterative</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">m1</span> <span class="p">=&gt;</span> <span class="n">m1</span><span class="p">.</span><span class="n">MethodsCallingMe</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="n">DefinitionDomain</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">m1</span> <span class="p">=&gt;</span> <span class="n">m1</span><span class="p">.</span><span class="n">ParentAssembly</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;Tests&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">m1</span> <span class="p">=&gt;</span> <span class="n">m1</span><span class="p">.</span><span class="n">ParentType</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Distinct</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">ToArray</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">directTestTypes</span> <span class="p">=</span> <span class="n">m</span><span class="p">.</span><span class="n">MethodsCallingMe</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">m1</span> <span class="p">=&gt;</span> <span class="n">m1</span><span class="p">.</span><span class="n">ParentAssembly</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="s">&quot;Tests&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">m1</span> <span class="p">=&gt;</span> <span class="n">m1</span><span class="p">.</span><span class="n">ParentType</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Distinct</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">ToArray</span><span class="p">()</span>
</span><span class='line'><span class="k">orderby</span> <span class="n">m</span><span class="p">.</span><span class="n">CyclomaticComplexity</span> <span class="k">descending</span><span class="p">,</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILCyclomaticComplexity</span> <span class="k">descending</span><span class="p">,</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILNestingDepth</span> <span class="k">descending</span>
</span><span class='line'><span class="k">select</span> <span class="k">new</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">CyclomaticComplexity</span><span class="p">,</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILCyclomaticComplexity</span><span class="p">,</span>
</span><span class='line'>      <span class="n">m</span><span class="p">.</span><span class="n">ILNestingDepth</span><span class="p">,</span> <span class="n">indirectTestTypes</span><span class="p">,</span> <span class="n">directTestTypes</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, I&#8217;ve just started using NDepend, and so far it is an invaluable tool in software architect&#8217;s toolbox. In my next post I&#8217;ll show how this tool can automate more code checking chores.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tackling Complexity in the Heart of DDD]]></title>
    <link href="http://www.vladikk.com/2016/04/05/tackling-complexity-ddd/"/>
    <updated>2016-04-05T19:14:00+03:00</updated>
    <id>http://www.vladikk.com/2016/04/05/tackling-complexity-ddd</id>
    <content type="html"><![CDATA[<p>Let’s do a little experiment: try to explain the gist of Domain-Driven Design to someone who has no clue about it. This, especially doing it succinctly, is not easy. Heck, I struggle with it myself. Bounded contexts, entities, repositories, domain events, value objects, domains, aggregates, repositories… where do you even start?</p>

<p>To find the order in the apparent chaos, I want to analyze the DDD methodology from a rather unusual perspective — by applying Domain-Driven Design to Domain-Driven Design itself. After all, this methodology is intended to deal with complex domains, isn’t it?</p>

<p>Let’s start by identifying the core domain: what is DDD’s main competitive advantage, and what are its means of achieving it?</p>

<h2>The Core Domain: Ubiquitous Language</h2>

<p>In &#8220;Domain-Driven Design: Tackling Complexity in the Heart of Software&#8221;(the Blue Book), Eric Evans argues that poor collaboration between domain experts and software development teams causes many development endeavors to fail. DDD aims to increase the success rates by bridging this collaboration and communication gap.</p>

<!-- more -->


<p>To allow fluent sharing of knowledge, DDD calls for cultivation of a shared, business-oriented language: Ubiquitous Language. This language should resemble the business domain and its terms, entities, and processes.</p>

<p>The Ubiquitous Language should be extensively used throughout the project. All communication should be done in the Ubiquitous Language. All documentation should be formulated in it. Even the code should &#8220;speak&#8221; the Ubiquitous Language.</p>

<p>Many methodologies strive to reduce risk and increase success rates of software projects, but since Ubiquitous Language is DDD’s means of achieving it, I consider it as the Core Domain of Domain-Driven Design.</p>

<p>Defining a Ubiquitous Language is not a trivial thing to do. Since software doesn&#8217;t cope well with ambiguity, each Ubiquitous Language term should have exactly one meaning. Unfortunately, that&#8217;s not how human languages work — often words have different meanings in different contexts. To overcome this hurdle and support the process of cultivating a rigorous language, another DDD pattern is employed: Bounded Context.</p>

<h2>Supporting Sub-Domain: Bounded Contexts</h2>

<p>To prevent terms from having multiple meanings, DDD requires each language to have a strict applicability context, called Bounded Context. This pattern defines a boundary, inside of which the Ubiquitous Language can be used freely. Outside of it, the language’s terms may have different meanings.</p>

<p>Although the Bounded Context pattern is an essential part of Domain-Driven Design, I consider it a Supporting Sub-Domain, since its purpose is to support the formation of a Ubiquitous Language, the Core Domain.</p>

<p>As I mentioned earlier, the code should also &#8220;speak&#8221; the Ubiquitous Language of the Bounded Context in which it is implemented. But how do you implement a business domain in code? There is no one-size-fits-all pattern for implementing a business domain. Multiple options are available, and that&#8217;s our next stop. Be warned: sacred cows are about to be hurt&#8230;</p>

<h2>Generic Sub-Domain: Domain Implementation</h2>

<p>These patterns provide different ways of implementing the business domain&#8217;s logic:</p>

<ol>
<li>Transaction Script</li>
<li>Active Record</li>
<li>Domain Model</li>
<li>Event-Sourced Domain Model</li>
</ol>


<p>Each of these patterns suits a different level of domain complexity. The pattern you choose should be expressive enough to reify the Ubiquitous Language in code. It is crucial to point out that this decision is not set in stone. As the business evolves and the Ubiquitous Language&#8217;s complexity grows, the implementation pattern can be upgraded to a more elaborate one.</p>

<p>The aforementioned four patterns of business-domain implementation are the ones I am currently familiar with.</p>

<p>Indeed, there are may be others than I am currently unaware of.</p>

<p>New ones may be invented in the future.</p>

<p>Their implementation differs greatly in various programming paradigms.</p>

<p>Some best fit a certain programming paradigm but are complex to implement in others.</p>

<p>With all this volatility in mind, are they an essential part of Domain-Driven Design?</p>

<p>Since the Domain-Driven Design methodology cannot encompass all business domain implementation patterns, this know-how can, and should, be borrowed from other sources. For example, the Transaction Script, Active Record, and even Domain Model are described in Martin Fowler’s &#8220;Patterns of Enterprise Application Architecture&#8221; book. By definition, the ability to rely on &#8220;off-the-shelf&#8221; solutions makes them a Generic Sub-Domain. Yes, even the Domain Model pattern.</p>

<h2>Implications</h2>

<p>The decoupling of Domain-Driven Design from the tactical modeling patterns can have positive, far-reaching implications on DDD&#8217;s accessibility and adoption rates. I want to elaborate on three of them: reducing DDD&#8217;s complexity, widening its applicability, and the ability to gain a lot of traction by jumping on the Microservices bandwagon.</p>

<h3>1. Reduced Complexity</h3>

<p>This mind map by Eric Evans depicts the patterns that constitute the Domain-Driven Design methodology:</p>

<p><img src="http://www.vladikk.com/images/ddd/ddd-patterns.png" alt="Domain-Driven Design Patterns" /></p>

<p>And this is how it will look if we drop the tactical modeling patterns:</p>

<p><img src="http://www.vladikk.com/images/ddd/ddd-patterns2.png" alt="Domain-Driven Design Patterns" /></p>

<p>Shabang! Which one do you think will be easier to grasp and explain?</p>

<p>Decoupling of DDD from the Tactical Modeling patterns will prevent many of the misconceptions and difficulties many newcomers experience – for example, reading the first four chapters of the Blue Book and having a feeling that they&#8217;ve got a strong grasp of DDD. And speaking of the Blue Book, many complain that it doesn&#8217;t provide enough code samples. Well, guess what? Once DDD is decoupled from the Tactical Modeling patterns, it no longer requires any code samples at all. It&#8217;s a pure system modeling methodology that can be applied in any technology stack and any software paradigm.</p>

<h3>2. Wider Applicability</h3>

<p>I strongly disagree with the notion that Domain-Driven Design should be applied to complex projects only. This notion is driven by the strong coupling of DDD to the Domain Model pattern. Once we break this coupling, a whole new world of possibilities opens up.</p>

<h4>Communication</h4>

<p>No matter how simple the business domain is, if team members use different terminology for the same artifacts, sooner or later they will find themselves in the realm of accidental complexity. The Ubiquitous Language pattern prevents this scenario and yields a clear communication medium between all team members.</p>

<h4>Business Growth</h4>

<p>A domain&#8217;s complexity increases more often than it decreases. This possibility of increase is highest for the so-called not complex projects. Once this happens, the implementation pattern decision should be rethought and adapted to the new complexity levels.</p>

<h3>3. Microservices</h3>

<p>Microservices are red hot nowadays. Widening the applicability of DDD to more project types will allow many microservices-based solutions to harness the invaluable DDD tools. The Bounded Context pattern provides a business-driven way of dividing a system into a set of independent services, and the Structure Map is a great way to map the services’ topology and interaction patterns between them.</p>

<h2>&#8220;Are You Nuts?&#8221;</h2>

<p>That&#8217;s what you&#8217;re probably thinking right now. However, I don&#8217;t think that my proposition – to take the Tactical Patterns out of DDD – is as crazy as it initially sounds. Back at the DDD Europe 2016 conference, Eric Evans himself stated that the Domain Model implementation described in the Blue Book was intended to be <em>a</em> way of implementing a <em>Domain Model</em>, but many mistook it as <em>the</em> way of implementing <em>Domain-Driven Design</em>. See, the Tactical Modeling patterns were never intended to be the one-and-only way to do DDD, but many consider them as such. They produce extraneous noise and detract attention away from the most important, and unique-to-DDD material.</p>

<p>Also, you cannot say that the Domain-Driven Design methodology is in its perfect state, and has no reason to change. Unfortunately, its low adoption rates speak for themselves. DDD deserves way more attention than it gets. The Blue Book came out more than a decade ago, and since then the methodology has barely changed. I believe that it should change. Not because it&#8217;s bad – on the contrary, because it&#8217;s great. But it has much, much more potential than it has currently realized.</p>

<h2>Final Thoughts</h2>

<p>In no way did I intend to denigrate the importance of Tactical Modeling. Quite the opposite: this subject deserves much more attention than it gets. But in its own context. There are many more patterns besides the Domain Model, and more ways to implement them, than can fit in a single DDD book. Moreover, these patterns can be implemented even on non-DDD projects, and a project can follow the DDD principles even if it doesn&#8217;t have a single aggregate in it.</p>

<h2>What do you think?</h2>

<p>I&#8217;d love to hear your opinion on this in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Quick and Dirty Hack for Interviewing Job Candidates]]></title>
    <link href="http://www.vladikk.com/2016/03/05/interviewing/"/>
    <updated>2016-03-05T16:59:00+02:00</updated>
    <id>http://www.vladikk.com/2016/03/05/interviewing</id>
    <content type="html"><![CDATA[<p>One simple question can shed a lot of light on one’s competency in a given field: &#8220;On a scale of 1 to 10, please rate your knowledge of [enter-name-of-the-field-here]&#8221;.</p>

<p>One can assume that the higher the grade, the better. But that’s not the case at all. Why? Science — that’s why. Enter the Dunning-Kruger effect.</p>

<h2>The Dunning-Kruger Effect</h2>

<p>The Dunning-Kruger effect is a cognitive bias that suggests that one cannot objectively assess one&#8217;s own abilities. It’s all about the unknowns — things that you don’t know — and whether you&#8217;re aware of them.</p>

<p>The less expertise you have in a given field, the more unknown unknowns you have. You cannot objectively evaluate your knowledge, and, consequently, you are mistakenly assessing your abilities to be much higher than they actually are.</p>

<p>This bias also works the other way around. The more expertise you have in a given field, the more known unknowns you have. This awareness of things you don&#8217;t know tricks you into making a more humbling assessment of your abilities.</p>

<!-- more -->


<p>A more formal explanation can be found on <a href="https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect">Wikipedia</a>.</p>

<h2>What Answers to Look For?</h2>

<p>According to the Dunning-Kruger effect, it&#8217;s safe to say that you should beware of the answers that rate below 4 or above 8. And run for your life if the answer is greater than 10!</p>

<p>The 5-7 range is the sweet spot.</p>

<p>Also, there&#8217;s one more answer to look for: an inquiry to define what level of competency merits a 10.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDDEU 2016 Impressions]]></title>
    <link href="http://www.vladikk.com/2016/02/12/dddeu-2016/"/>
    <updated>2016-02-12T22:27:00+02:00</updated>
    <id>http://www.vladikk.com/2016/02/12/dddeu-2016</id>
    <content type="html"><![CDATA[<p>Last month, I had the pleasure of attending the Domain Driven Design Europe conference in Brussels. As I’ve tweeted before, this was the best conference I’ve ever attended. In this post, I’d like to sum the things I’ve learned at the conference.</p>

<h2>It&#8217;s Not (Only) About Sessions</h2>

<p>It was the first time I’ve attended a conference alone. Honestly, I was afraid that my introverted side would take over, and I’d master wallflower imitation techniques between sessions. Fortunately, it didn’t happen. I felt at home the moment I left the hotel for the conference. From that moment on, and up until the very last moments of the conference, I met a lot of like-minded people from all over the world - Belgium, Denmark, Germany, Austria, UK, Poland, Italy, France, USA, Finland, Switzerland, Netherlands, Romania, Bulgaria, and even from Israel.</p>

<p>For me, the social part, alone, was worth the trip. And don’t get me wrong, the sessions were great, but the ability to meet new friends, share experiences and ideas, and get fresh perspectives, was priceless.
And I’m yet to mention discussing Star Wars with Eric Evans, discovering that Vaughn Vernon knows Israel better than I do, catching up with Greg Young, and last but not least, drinking beer with Yves Reynhout — it is unbelievable how much I learned from Yves that evening.</p>

<p>Lesson learned: Go to conferences alone and meet new people.</p>

<!-- more -->


<h2>The State of DDD</h2>

<p>There was one thing that saddened me during the conference — the state of DDD. Let me explain.
I knew, that in Israel, DDD is not a common knowledge. I was pretty sure, that in Europe and the US, things are different, and DDD is a popular and accepted practice. The moment I started meeting new people, I got a feeling that this is far from truth. My surmise was confirmed when Vaughn took the stage to deliver his “oDDs &amp; enDs” talk.</p>

<p>Unfortunately, DDD is still in the underground, and it has a long road ahead to become a mainstream practice. To make it possible, the DDD community has to find a way to convince Eric to write the second edition of his seminal book.</p>

<h2>Sessions</h2>

<p>Although, for me, the sessions weren’t the critical part of the conference, they were great, nonetheless. The sessions that I liked the most:</p>

<ul>
<li>Eric Evan’s keynote - Nothing to explain here. Just go watch it the moment it will be available online.</li>
<li>“A Board Game Night with Geeks” by Felienne Hermans - Even though the <a href="https://twitter.com/DDD_Borat/status/693021883571240960">DDD police</a> was alert for this one, I really liked it. Felienne demonstrated the importance of choosing the right model and how crucial it is for solving problems.</li>
<li>“Jef &amp; Tom&#8217;s Awesome Modellathon” — It was the first time I tried event storming hands-on, and boy, it was a great learning experience.</li>
<li>“Cognitive Cynefin” by Liz Keogh - I am a junkie for linguistics, and this session demonstrated DDD from a very unusual angle. The <a href="https://twitter.com/DDD_Borat/status/693021883571240960">DDD police</a> was wide awake here as well,  but Eric came to Liz’s rescue.</li>
<li>“Interviewing Domain Experts: Heuristics from the trenches” by Cyrille Martraire - This talk set the bar very high for the second day of the conference. Cyrille shared a lot of wisdom about talking to domain experts, in my opinion, a subject that deserves much more attention than it gets.</li>
<li>“oDDs &amp; enDs” by Vaughn Vernon - Just as with Eric’s keynote, nothing to explain here - a must-watch.</li>
<li>“A Decade of DDD, CQRS, Event Sourcing“ by Greg Young - A very entertaining and very informative session. Greg confirmed something that I was suspecting for a long time - Event Sourcing is the pattern that provides the real business value; CQRS is just a stepping stone to implement it.</li>
</ul>


<h2>DDDEU 2017</h2>

<p>To sum up, DDDEU 2016 was a great conference. A huge kudo goes to Mathias Verraes, Shawn McCool, Jeroen Gerits, DDDBE, and everyone else involved for making this happen. Can’t wait for DDDEU 2017 in Netherlands.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD: What Went Wrong…Or Did It?]]></title>
    <link href="http://www.vladikk.com/2016/01/22/tdd-what-went-wrong/"/>
    <updated>2016-01-22T20:57:00+02:00</updated>
    <id>http://www.vladikk.com/2016/01/22/tdd-what-went-wrong</id>
    <content type="html"><![CDATA[<p>Test Driven Development has been praised by our industry&#8217;s aficionados for a long time. However, lately there have been many harsh words said towards TDD, as it’s being blamed for causing bad software design and not keeping many of its promises. This trend culminated in David Heinemeierhansson’s post <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">“TDD is dead. Long live testing”</a>.</p>

<p>How is it possible, that the same technique, which is so advantageous to so many developers, is so disastrous to others?
In this post I want to talk about 3 misconceptions that might explain this phenomenon.</p>

<p>Let&#8217;s start with the subtlest and most destructive one.</p>

<h2>1. TDD is NOT “Test Driven <em>Design</em>”</h2>

<p>TDD stands for “Test Driven <em>Development</em>”. Unfortunately, many misinterpret this as “Test Driven <em>Design</em>”. This inaccuracy may sound innocent, but believe me, it isn&#8217;t. Let me explain.</p>

<!-- more -->


<p>Test Driven Design implies that automatic tests should drive your software design decisions. Seriously? With all due respect, automatic tests are no end goal for developing software. The true goal is delivering projects on time, on budget, and most importantly, meeting all quality requirements. That&#8217;s where all your design and development efforts should be aimed at.</p>

<p>If you design first and foremost for testability, you get what you pay for — testable code. More often than not, this design will be totally disconnected from the project&#8217;s business domain and requirements. It will resemble an enormous object graph full of accidental complexities… but it will be testable. Testable by tests that are drowning in mocks, and will fail altogether after changing a single bit in the implementation. That&#8217;s what they call &#8220;test induced damage&#8221;, and it is vividly depicted in DHH’s <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">“TDD is Dead”</a> blog post:</p>

<blockquote><p>The current fanatical TDD experience leads to a primary focus on the unit tests, because those are the tests capable of driving the code design (the original justification for test-first) I don&#8217;t think that&#8217;s healthy. Test-first units leads to an overly complex web of intermediary objects and indirection in order to avoid doing anything that&#8217;s &#8220;slow&#8221;. Like hitting the database. Or file IO. Or going through the browser to test the whole system. It&#8217;s given birth to some truly horrendous monstrosities of architecture. A dense jungle of service objects, command patterns, and worse.</p></blockquote>

<p>How it should be? Your business domain should drive your design decisions. Choose the implementation that best suits the problem you are trying to solve. There is no sense in a full-blown <a href="http://martinfowler.com/eaaCatalog/domainModel.html">Domain Model</a> if all you need is a vanilla CRUD interface - implement the <a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">Active Record pattern</a> instead! If all you need is an ETL script, go with the <a href="http://martinfowler.com/eaaCatalog/transactionScript.html">Transaction Script pattern</a>!</p>

<p>How on earth can it make sense to solve all problems with the same solution - hexagonal architecture and a domain model? &#8220;Because this design is ideal for unit tests!&#8221; I see. It&#8217;s time to talk about the second misconception.</p>

<h2>2. TDD Isn&#8217;t (only) About Unit Tests</h2>

<p>It is widely accepted that if you are doing TDD, you should write unit tests. This makes no sense. Unit tests are no magic bullet, and by the way, if you look up TDD on <a href="https://en.wikipedia.org/wiki/Test-driven_development">Wikipedia</a>, you won&#8217;t find anything about unit tests:</p>

<blockquote><p>Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards.</p></blockquote>

<p>The emphasis is on the automated tests, and they can be categorized into 3 types: unit tests, integration tests, and end-to-end tests. I don&#8217;t believe that every project needs each and every one of them. Again, this decision should be driven by your problem domain:</p>

<ol>
<li>Are you dealing with complex business logic? You do need unit tests here</li>
<li>Are you only doing simple CRUD operations? Go ahead with integration tests, or event end-to-end tests</li>
<li>An ETL script? End-to-end tests will suffice</li>
</ol>


<p>Pick a testing strategy that best suits your domain. Write your tests first, and voila - you are doing TDD and not letting tests lead your design astray.</p>

<p>&#8230;And speaking of unit tests, what is a unit anyway?</p>

<h2>3. Unit != Class</h2>

<p>Another common misconception is that unit tests should be exercising individual classes, and all the class&#8217;s dependencies should be mocked out. This approach is inaccurate. It is a recipe for strong coupling between tests and implementation. This coupling will undermine all your refactoring efforts, thus breaking one of the fundamental TDD promises.</p>

<p>The definition of a unit I like the most belongs to <a href="http://artofunittesting.com/definition-of-a-unit-test/">Roy Osherove</a>, the author of <a href="http://www.amazon.com/gp/product/1617290890">The Art of Unit Testing</a>:</p>

<blockquote><p>A unit test is an automated piece of code that invokes a unit of work in the system and then checks a single assumption about the behavior of that unit of work.</p>

<p>A unit of work is a single logical functional use case in the system that can be invoked by some public interface (in most cases). A unit of work can span a single method, a whole class or multiple classes working together to achieve one single logical purpose that can be verified.</p></blockquote>

<p>Testing functional uses cases uncouples the tests from the implementation. It will make refactoring possible, and will require significantly less mocking.</p>

<h2>The Missing &#8220;D&#8221; in TDD</h2>

<p>Ultimately, there is one more observation that I want to share, because it sums up all the aforementioned misconceptions.</p>

<p>It is recognized that a well-designed code is also a testable one. However, this relation is not commutative: well-designed code is testable, but not all testable code is well designed. The proof is trivial:</p>

<ul>
<li><p>How can you identify a testable code? Easy - by whether it has tests or not</p></li>
<li><p>How can you evaluate the design quality? Sorry, no shortcuts here - it is all about the context. A well-thought-out solution for one project is over-engineering for another. And over-engineering for one domain is negligence for a more complicated one.</p></li>
</ul>


<p>Therefore, even if the implementation is testable, it can still miss its problem and business domain by a mile. Consequently, the missing &#8220;D&#8221; in TDD is the business/problem &#8220;Domain&#8221;. That&#8217;s why I believe that <a href="https://en.wikipedia.org/wiki/Domain-driven_design">Domain Driven Design</a>(DDD) is a prerequisite to Test Driven Development. The DDD methodology doesn&#8217;t apply to complex domain models only - on the contrary, it defines a set of guidelines for choosing the best tool for the job according to the problem domain. But that&#8217;s a topic for a whole other post.</p>

<h2>P.S. TDD 2.0</h2>

<p>TDD was &#8220;rediscovered&#8221; by Kent Beck over a decade ago. Perhaps it&#8217;s about time for TDD to be rediscovered again. In addition to Unit Tests, the new specification should relate to other automated test types that weren&#8217;t available back then. And of course, instead of working against, it should closely cooperate with the business domain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serving Flask with Nginx]]></title>
    <link href="http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/"/>
    <updated>2013-09-12T22:37:00+03:00</updated>
    <id>http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Having spent the majority of my career in the Microsoft stack, lately I&#8217;ve decided to step out of my comfort zone and to dive into the world of open source software. The project I&#8217;m currently working on at my day job is a RESTful service. The service will be running on a commodity hardware, that should be able to scale horizontally as needed. To do the job I&#8217;ve decided to use Flask and Nginx. Flask is a lightweight Python web framework, and nginx is a highly stable web server, that works great on cheap hardware.</p>

<p>In this post I will guide you through the process of installing and configuring nginx server to host Flask based applications. The OS I&#8217;ll be using is Ubuntu 13.04.</p>

<h2>Nginx</h2>

<p>To install nginx from apt-get, we have to add Nginx repositories to apt-get sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:nginx/stable
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: If the &#8220;add-apt-repository&#8221; command doesn&#8217;t exist on your Ubuntu version, you need to install the &#8220;software-properties-common&#8221; package:
sudo apt-get install software-properties-common (Thanks to get_with_it for mentioning it in the comments)</em></p>

<p>Update and upgrade packages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>


<p>Install and start Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nginx
</span><span class='line'>sudo /etc/init.d/nginx start
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #1</h3>

<p>Browse to your server and you should get the Nginx greeting page:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_1.png" alt="nginx" /></p>

<!-- more -->


<h2>Sample application</h2>

<p>The application we will host is literally a &#8220;Hello, world!&#8221; application. It will serve only one page, and guess what text it will contain.
All the application related files will be stored at the /var/www/demoapp folder. Let&#8217;s create this folder, and initialize a virtual environment in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /var/www
</span><span class='line'>sudo mkdir /var/www/demoapp
</span></code></pre></td></tr></table></div></figure>


<p>Since we created the folder under root privileges, it is currently owned by the root user. Let&#8217;s change the ownership to the user you are logged in to (&#8220;ubuntu&#8221; in my case):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R ubuntu:ubuntu /var/www/demoapp/
</span></code></pre></td></tr></table></div></figure>


<p>Install the virtualenv package:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python-virtualenv
</span></code></pre></td></tr></table></div></figure>


<p>Create and activate a virtual environment, and install Flask into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /var/www/demoapp
</span><span class='line'>virtualenv venv
</span><span class='line'>. venv/bin/activate
</span><span class='line'>pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>Create the hello.py file, with the following code:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/hello.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #2</h3>

<p>Let&#8217;s execute the script we&#8217;ve just created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python hello.py
</span></code></pre></td></tr></table></div></figure>


<p>Now you can browse to your server&#8217;s port 8080 and see the app in action:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_2.png" alt="flask" /></p>

<p><em>Note: I&#8217;ve used port 8080 because port 80 is already in use by nginx</em></p>

<p>Currently the app is served by Flask&#8217;s built in web server. It is a great tool for development and debugging needs, but it is not recommended in production environment. Let&#8217;s install uWSGI and configure Nginx to do the heavy lifting.</p>

<h2>uWSGI</h2>

<p>Nginx is a web server. It serves static files, however it cannot execute and host Python application. uWSGI fills that gap. Let&#8217;s install it first, and later we&#8217;ll configure nginx and uWSGI to talk to each other.</p>

<p>First, make sure you have the required compilers and tools, and then install uWSGI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install build-essential python python-dev
</span><span class='line'>pip install uwsgi
</span></code></pre></td></tr></table></div></figure>


<h2>Configuring Nginx</h2>

<p>Let&#8217;s start by removing the Nginx&#8217;s default site configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm /etc/nginx/sites-enabled/default
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note: If you installed a version of nginx from other repository, the default configuration file may be located at the /etc/nginx/conf.d folder.</strong></p>

<p>Instead create a new configuration file for our application <strong>/var/www/demoapp/demoapp_nginx.conf</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>server {
</span><span class='line'>    listen      80;
</span><span class='line'>    server_name localhost;
</span><span class='line'>    charset     utf-8;
</span><span class='line'>    client_max_body_size 75M;
</span><span class='line'>
</span><span class='line'>    location / { try_files $uri @yourapplication; }
</span><span class='line'>    location @yourapplication {
</span><span class='line'>        include uwsgi_params;
</span><span class='line'>        uwsgi_pass unix:/var/www/demoapp/demoapp_uwsgi.sock;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>And symlink the new file to nginx&#8217;s configuration files directory and restart nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /var/www/demoapp/demoapp_nginx.conf /etc/nginx/conf.d/
</span><span class='line'>sudo /etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #3</h3>

<p>Browser to server&#8217;s public ip address, and you will be greeted by an error:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_3.png" alt="502" />
No need to worry, this is a &#8220;good&#8221; error. It says that nginx uses the configuration file we just created, but it has a trouble connecting to our Python application host, uWSGI. The connection to uWSGI is defined in the configuration file at line #10:</p>

<pre><code>uwsgi_pass unix:/var/www/demoapp/demoapp_uwsgi.sock;
</code></pre>

<p>It says that the communication between nginx and uWSGI is done via a socket file, that should be located at <em>/var/www/demoapp/demoapp_uwsgi.sock</em>. Since we still haven&#8217;t configured uWSGI yet, the file doesn&#8217;t exist, and Nginx returns the &#8220;bad gateway&#8221; error. Let&#8217;s fix this now.</p>

<h2>Configuring uWSGI</h2>

<p>Create a new uWSGI configuration file <strong>/var/www/demoapp/demoapp_uwsgi.ini</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[uwsgi]
</span><span class='line'>#application&#39;s base folder
</span><span class='line'>base = /var/www/demoapp
</span><span class='line'>
</span><span class='line'>#python module to import
</span><span class='line'>app = hello
</span><span class='line'>module = %(app)
</span><span class='line'>
</span><span class='line'>home = %(base)/venv
</span><span class='line'>pythonpath = %(base)
</span><span class='line'>
</span><span class='line'>#socket file&#39;s location
</span><span class='line'>socket = /var/www/demoapp/%n.sock
</span><span class='line'>
</span><span class='line'>#permissions for the socket file
</span><span class='line'>chmod-socket    = 666
</span><span class='line'>
</span><span class='line'>#the variable that holds a flask application inside the module imported at line #6
</span><span class='line'>callable = app
</span><span class='line'>
</span><span class='line'>#location of log files
</span><span class='line'>logto = /var/log/uwsgi/%n.log
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s create a new directory for uwsgi log files, and change its owner to your user:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /var/log/uwsgi
</span><span class='line'>sudo chown -R ubuntu:ubuntu /var/log/uwsgi
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #4</h3>

<p>Let&#8217;s execute uWSGI and pass it the newly created configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>uwsgi --ini /var/www/demoapp/demoapp_uwsgi.ini
</span></code></pre></td></tr></table></div></figure>


<p>Next, browse to your server. Now nginx should be able to connect to uWSGI process:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_4.png" alt="uwsgi" /></p>

<p>We are almost finished. The only thing left to do, is to configure uWSGI to run as a background service. That&#8217;s the duty of uWSGI Emperor.</p>

<h2>uWSGI Emperor</h2>

<p>uWSGI Emperor (quite a name, isn&#8217;t it?) is responsible for reading configuration files and spawing uWSGI processes to execute them.
Create a new upstart configuration file to execute emperor - <strong>/etc/init/uwsgi.conf</strong>:</p>

<figure class='code'><figcaption><span>/etc/init/uwsgi.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>description <span class="s2">&quot;uWSGI&quot;</span>
</span><span class='line'>start on runlevel <span class="o">[</span>2345<span class="o">]</span>
</span><span class='line'>stop on runlevel <span class="o">[</span>06<span class="o">]</span>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>env <span class="nv">UWSGI</span><span class="o">=</span>/var/www/demoapp/venv/bin/uwsgi
</span><span class='line'>env <span class="nv">LOGTO</span><span class="o">=</span>/var/log/uwsgi/emperor.log
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> <span class="nv">$UWSGI</span> --master --emperor /etc/uwsgi/vassals --die-on-term --uid www-data --gid www-data --logto <span class="nv">$LOGTO</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last line executes the uWSGI daemon and sets it to look for config files in the <strong>/etc/uwsgi/vassals</strong> folder. Let&#8217;s create this folder and symlink the configuration file we created earlier into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /etc/uwsgi <span class="o">&amp;&amp;</span> sudo mkdir /etc/uwsgi/vassals
</span><span class='line'>sudo ln -s /var/www/demoapp/demoapp_uwsgi.ini /etc/uwsgi/vassals
</span></code></pre></td></tr></table></div></figure>


<p>Also, the last line states the the user that will be used to execute the daemon is www-data. For simplicity&#8217;s sake, let&#8217;s set him as the owner of the application and log folders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R www-data:www-data /var/www/demoapp/
</span><span class='line'>sudo chown -R www-data:www-data /var/log/uwsgi/
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note: The nginx version we installed earlier uses the &#8220;www-data&#8221; user for executing nginx. Nginx versions from other repositories may use a user named &#8220;nginx&#8221; instead.</strong></p>

<p>Since both, nginx and uWSGI, are now being run by the same user, we can make a security improvement to our uWSGI configuration. Open up the uwsgi config file and change the value of chmod-socket from <strong>666</strong> to <strong>644</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>#permissions for the socket file
</span><span class='line'>chmod-socket    = 644
</span></code></pre></td></tr></table></div></figure>


<p>Now we can start the uWSGI job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start uwsgi
</span></code></pre></td></tr></table></div></figure>


<p>Finally, both Nginx and uWSGI are configured to correctly serve our application on system start up.</p>

<h2>Troubleshooting</h2>

<p>If something goes wrong, the first place to check is the log files. By default, nginx writes error message to the file <strong>/var/log/nginx/errors.log</strong>.</p>

<p>We&#8217;ve configured uWSGI emperor to write it&#8217;s logs to <strong>/var/log/uwsgi/emperor.log</strong>. Also this folder contains separate log files for each configured application. In our case - <strong>/var/log/uwsgi/demoapp_uwsgi.log</strong>.</p>

<h2>Static Files</h2>

<p>If your application has to serve static files, the following rule should be added to the <strong>demoapp_nginx.conf</strong> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>location /static {
</span><span class='line'>    root /var/www/demoapp/;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>As a result, all static files located at <strong>/var/www/demoapp/static</strong> will be served by nginx.
<em>(Bastianh, thanks for pointing this out)</em></p>

<h2>Hosting Multiple Applications</h2>

<p>If you want to host multiple Flask applications on a single server, create a separate folder for each application, as we did earlier, and symlink nginx and uWSGI configuration files to the appropriate folder.</p>

<h2>Deploying Applications with Distribute</h2>

<p>To deploy Flask apps using <a href="https://pypi.python.org/pypi/distribute">distribute</a>, first follow the steps in <a href="http://flask.pocoo.org/docs/patterns/packages/#larger-applications">Flask documentation</a> to convert your application into a package. Next, copy the generated distribute setup package to the server, and use the virtual environment&#8217;s Python to install it. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>And last but not least, the &#8220;app&#8221; property of uWSGI configuration&#8217;s file should be equal to name of the package that holds the Flask application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON2CSV]]></title>
    <link href="http://www.vladikk.com/2013/06/11/json2csv/"/>
    <updated>2013-06-11T16:05:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/11/json2csv</id>
    <content type="html"><![CDATA[<p>Last week I&#8217;ve needed a utility to convert a file containing json data to csv. I found many online solutions, but for some weird reason they didn&#8217;t support nested objects and arrays. So I wrote one, this time in python.
Grab it here - <a href="https://github.com/vladikk/json2csv">Github repository</a>.</p>

<h2>Usage</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python json2csv.py "input_file.json" "output_file.csv"</span></code></pre></td></tr></table></div></figure>


<p>If you pass in the following json file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;age&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;c#&quot;</span><span class="p">,</span> <span class="s2">&quot;vb&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span> <span class="p">]</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;middle&quot;</span><span class="p">:</span> <span class="s2">&quot;scottster&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;age&quot;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;objective-c&quot;</span><span class="p">,</span> <span class="s2">&quot;c++&quot;</span> <span class="p">]</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll get the following csv file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>age,  id,    languages_0,    languages_1,    languages_2,    name_first, name_last,  name_middle
</span><span class='line'>27,   1,      c#,             vb,             python,         john,       johnson,
</span><span class='line'>29,   2,      objective-c,    c++,            ,               scott,      scottson,   scottster
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing SQL2JSON]]></title>
    <link href="http://www.vladikk.com/2013/06/09/sql2json/"/>
    <updated>2013-06-09T13:38:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/09/sql2json</id>
    <content type="html"><![CDATA[<p>If you&#8217;ll ever try to generate JSON file using Sql Server&#8217;s Management Studio, probably there&#8217;ll be lots of pain in your future. If you wanna save the pain, you can use SQL2JSON, an open source project I started last week.</p>

<p>The idea was born out of a need to generate a huge JSON file containing data from MSSQL database. After seeing our DBA struggling with formatting, escaping weird characters and unicode strings, I decided to write a small utility that will do just that - execute a sql query and capture its results as a json file.
You can grab it from <a href="https://github.com/vladikk/sql2json">Github repository</a>.</p>

<h2>Usage</h2>

<p>Suppose you have a table called &#8220;users&#8221; with the following records:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|user_id | first_name | last_name
</span><span class='line'>|--------|------------|----------
</span><span class='line'>|1       | john       | johnson
</span><span class='line'>|2       | scott      | scottson
</span><span class='line'>|3       | paul       | paulson</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>Example #1 - Simplest Case</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sql2json.exe -cs="Data Source=.;Initial Catalog=DB1;User Id=usr;Password=pwd;" -sql="select * from users" -output="users.json"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;paul&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;paulson&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example #2 - Nested Objects</h3>

<p>This example demonstrates the use of delimiters to build a json string containing nested objects</p>

<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">sql</span><span class="mi">2</span><span class="err">json.exe</span> <span class="err">-cs=</span><span class="s2">&quot;Data Source=.;Initial Catalog=DB1;User Id=usr;Password=pwd;&quot;</span> <span class="err">-sql=</span><span class="s2">&quot;select user_id, first_name as &#39;name::first&#39;, last_name as &#39;name::last&#39; from users&quot;</span> <span class="err">-output=</span><span class="s2">&quot;users.json&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;paul&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;paulson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Advanced Scenarios</h2>

<p>If you need to include custom calculations or aggregations in your JSON objects you can either pre-calculate them in your sql query, or if you are more adventurous, you can write your own implementation of ITransformer to execute the required logic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode file names in Python 2.7]]></title>
    <link href="http://www.vladikk.com/2013/06/01/unicode-file-names-in-python/"/>
    <updated>2013-06-01T14:58:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/01/unicode-file-names-in-python</id>
    <content type="html"><![CDATA[<p>Today I wrote a small script to find and delete duplicate files. To do this task I needed to iterate over files in a specific folder, and calculate md5 checksum for each file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">folder</span><span class="p">,</span> <span class="n">subs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>          <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
</span><span class='line'>              <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the source folder contains a file or a folder with unicode characters in it, execution of the code results in this bummer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="ne">IOError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">22</span><span class="p">]</span> <span class="n">invalid</span> <span class="n">mode</span> <span class="p">(</span><span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">filename</span><span class="p">:</span> <span class="s">&#39;files</span><span class="se">\\</span><span class="s">????????? ????? ????????.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>The solution was easy. As it turned out, the os.walk method can return values encoded either as ASCII or as Unicode strings. It chooses the encoding based on the encoding of the &#8220;top path&#8221; argument. Originally I was passing an ASCII string. Once it was encoded to UTF-8 the problem was solved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">folder</span><span class="p">,</span> <span class="n">subs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="nb">unicode</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;utf-8&#39;</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uncoupling Configuration Files]]></title>
    <link href="http://www.vladikk.com/2013/05/14/uncoupling-configuration-files/"/>
    <updated>2013-05-14T17:34:00+03:00</updated>
    <id>http://www.vladikk.com/2013/05/14/uncoupling-configuration-files</id>
    <content type="html"><![CDATA[<p>Tight coupling is a known source for inflexible and hard to test code. In this post I want to talk about a rather unexpected source of tight coupling - configuration files.
Configuration files are external dependencies. As other external dependencies, its infrastructure may change in the future, and it should be easily mocked for unit testing. Modern software frameworks provide means for easy access to the values stored in configuration files. In the .NET framework configuration files can be accessed using the ConfigurationManager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;Foo&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;Bar&quot;</span> <span class="na">value=</span><span class="s">&quot;2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appSettings&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">int</span> <span class="n">foo</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSetttings</span><span class="p">[</span><span class="err">“</span><span class="n">Foo</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">bar</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">Bar</span><span class="err">”</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ConfigurationManager makes it trivial to access data in the config file, however in most cases it also introduces various code smells that make the code tight coupled and hard to test. In the next sections I’ll introduce a simple class and will use it to demonstrate the code smells and violations of principles of clean object oriented design. The code will be gradually refactored to a better and cleaner solution.</p>

<!-- more -->


<h1>FooBarBaz</h1>

<p>Consider the following class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="p">=</span> <span class="kt">bool</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">bar</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">baz</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">baz</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">bar</span> <span class="p">:</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class depends on three values stored in the configuration file - a boolean “foo”, and two integers, “bar” and “baz”. Let’s see what issues we can find in this simple code.</p>

<h3>Smell #1 Impaired Testability</h3>

<p>How would you test the “Execute” method? Probably, you would have to assign the Foo’s value manually using ConfigurationManager in each test case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Test]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Test_if_foo_is_false_then____</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[Test]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Test_if_foo_is_true_then____</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a viable approach, yet it is prone to a flaw. To test the method you have to be familiar with its internals. You have to know where the class loads its configuration from, what framework it uses, and finally, what configuration keys are.
More often than not, hard to test code is guilty of violating principles of clean object oriented design. Let’s see what violations we can identify here.</p>

<h3>Smell #2 Violation of the Single Responsibility Principle (SRP)</h3>

<p>Currently this class does two things:</p>

<ul>
<li>Executing some logic defined in the “Execute” method</li>
<li>Loading and parsing values from the configuration file</li>
</ul>


<p>These two responsibilities are a clear violation of the Single Responsibility Principle, which states that each class should have only one responsibility, or in other words, every class should have only one reason for change. Currently FooBarBaz will be change if its logic changes or if there are changes in the configuration storage.</p>

<h3>Smell #3 Violation of the Dependency Inversion Principle (DIP)</h3>

<p>According to the Dependency Inversion Principle, high level modules should not depend on low level modules. In this case, the logic defined in the “Execute” method is a part of a high level module, but ConfigurationManager is a low level implementation detail. The two are tightly coupled because of the direct reference and use of ConfigurationManager by FooBarBaz.</p>

<h3>Smell #4 Violation of the Don’t Repeat Yourself Principle (DRY)</h3>

<p>Since ConfigurationManager returns a string representation of each configuration value, the class is also responsible for casting the strings to the correct types. This can be seen as a violation of the DRY principle: Each parameter’s type is defined by its variable’s type, and also in the parsing part, which states once again to what type the value should be parsed.</p>

<h1>Refactoring #1</h1>

<p>To get rid of these smells, let’s remove the dependency on ConfigurationManager, and make it a responsibility of FooBarBaz’s caller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="kt">bool</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">,</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">foo</span> <span class="p">=</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">baz</span> <span class="p">=</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">bar</span> <span class="p">:</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This refactoring provides the following benefits:
The class is responsible only for executing the logic, and therefor it has a single reason for change.
All execution flows can be easily tested by passing the configurations values to the constructor.</p>

<h3>Smell #5 Many Constructor Arguments</h3>

<p>The obvious downside of this refactoring is that the number of constructor arguments has grown. Currently the constructor has 3 parameters. It&#8217;s advisable to minimize the number of constructor&#8217;s arguments. Let&#8217;s see how we shrink the number of arguments to one.</p>

<h1>Refactoring #2</h1>

<p>Since the three arguments, foo, bar, and baz, are naturally go together, we can apply the “Introduce Parameter Object” refactoring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="n">Config</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="n">Config</span> <span class="n">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">config</span> <span class="p">=</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Config</span><span class="p">(</span><span class="kt">bool</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">,</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Foo</span> <span class="p">=</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Baz</span> <span class="p">=</span> <span class="n">baz</span><span class="p">;</span>   
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple refactoring reduces the number of constructor arguments to one, however it introduces another code smell.</p>

<h3>Smell #6 Too Much Ceremony</h3>

<p>In case we’ll need to introduce a new configuration parameter, it will require too much ceremony - adding it in at least four places:</p>

<ol>
<li>New public property should be added to hold the new value</li>
<li>The new value should be added to Config’s constructor</li>
<li>Assignment of the value passed to the constructor to the new public property</li>
<li>The code that loads values from configuration source and creates an instance of the Config object</li>
</ol>


<p>Adding the new public property is probably inevitable, but let’s see how the code can be refactored to eliminate the other three modifications.</p>

<h1>Refactoring #3</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="n">Config</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="n">Config</span> <span class="n">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">config</span> <span class="p">=</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">interface</span> <span class="n">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, converting the Config class to an interface reduced the required modifications to a bare minimum. On the other hand, it looks like an added headache for the caller, the code that has to pass an instance of the Config object. Now it has both to load the data from the configuration storage and to provide its own implementation of the Config interface. Let’s see how this burden can be minimized:</p>

<h1>ConfigurationFactory</h1>

<p>The process of instantiating configuration objects will be the responsibility of this abstract factory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ConfigurationFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TConfig</span> <span class="n">Load</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="n">class</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An implementation of this interface is a low-level detail and therefore should reside in low-level modules of the application. Let&#8217;s see a simple implementation that uses .NET’s ConfigurationManager as configuration source.</p>

<h1>AppSettingsConfigurationFactory</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="nn">ImpromptuInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AppSettingsConfigurationFactory</span> <span class="p">:</span> <span class="n">ConfigurationFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TConfig</span> <span class="n">Build</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TConfig</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">typeName</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">FullName</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">).</span><span class="n">Last</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">properties</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">configDict</span> <span class="p">=</span> <span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;)</span><span class="k">new</span> <span class="n">ExpandoObject</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">property</span> <span class="k">in</span> <span class="n">properties</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span> <span class="n">typeName</span><span class="p">,</span> <span class="n">property</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">stringValue</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">castedValue</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ChangeType</span><span class="p">(</span><span class="n">stringValue</span><span class="p">,</span> <span class="n">property</span><span class="p">.</span><span class="n">PropertyType</span><span class="p">);</span>
</span><span class='line'>      <span class="n">configDict</span><span class="p">[</span><span class="n">property</span><span class="p">.</span><span class="n">Name</span><span class="p">]</span> <span class="p">=</span> <span class="n">castedValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">configDict</span><span class="p">.</span><span class="n">ActLike</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class harnesses the ImpromptuInterface library and some low-level magic to determine on the fly what configuration values should be loaded, and to create a class that implements the interface TConfig.
Each key stored in the configuration file is a concatenation of enclosing class&#8217;s name(FooBarBaz), configuration interface(Config), and the configuration parameter name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Foo&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Bar&quot;</span> <span class="na">value=</span><span class="s">&quot;7&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Baz&quot;</span> <span class="na">value=</span><span class="s">&quot;17&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appSettings&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Usage</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">configFactory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AppSettingsConfigurationFactory</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="n">configFactory</span><span class="p">.</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">FooBarBaz</span><span class="p">.</span><span class="n">Config</span><span class="p">&gt;();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FooBarBaz</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To instantiate the FooBarBaz class, the caller should get an instance of ConfigurationFactory, use it to build an instance of the Config object, and finally create an instance of FooBarBaz using the Config object.
The process can complicate things if you are using a dependency injection container. In this case, a custom plugin should be written that will identify Config interface and build them using the set up implementation of ConfigurationFactory.</p>

<h1>Refactoring #4: Simplifying The Usage</h1>

<p>The three step process of instantiating a class can be seen as an redundant ceremony that can be simplified. To simplify the process, let’s introduce a base class for classes that require configuration settings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Configurable</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TConfig</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="nf">Configurable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">ServiceLocator</span><span class="p">[</span><span class="err">“</span><span class="n">ConfigurationFactory</span><span class="err">”</span><span class="p">].</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And FooBarBaz inheriting Configurable<TConfig>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">:</span> <span class="n">Configurable</span><span class="p">&lt;</span><span class="n">Config</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">interface</span> <span class="n">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now FooBarBaz became even smaller. It no longer needs to explicitly hold an instance of a Config object, the base class does it. The base class also uses the <a href="http://en.wikipedia.org/wiki/Service_locator_pattern">ServiceLocator pattern</a> to acquire a ConfigurationFactory and build the configuration object. It also exposes a public property, “Configuration”, that can be used for <a href="http://blog.kh-v.net/2012/09/10/dependency-injection-patterns/">property injection</a> of the configuration object, e.g. for testing purposes.</p>

<h1>Conclusion</h1>

<p> Therefore, as with other dependencies, it should be encapsulated to guard against changes in the future and to make testing easier. In this post I presented an approach that I use to encapsulate configs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From Mistakes: Leaky Abstractions]]></title>
    <link href="http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions/"/>
    <updated>2012-10-15T03:10:00+02:00</updated>
    <id>http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions</id>
    <content type="html"><![CDATA[<p>On the project I’m working on I’ve had a requirement to store and read files
from the file system. Alse the files had to be accessible from the web.</p>

<p>Having a gut feeling that the infrastructure may change as the business will
grow, I decided to hide operations on the file system behind an interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IFilesStorage</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">StoreFile</span><span class="p">(</span><span class="n">Stream</span> <span class="n">stream</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Stream</span> <span class="nf">GetFile</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GetFileUrl</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GetFilePath</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it looks, if someday I’ll need to switch from the file
system to another storage mechanism, I’ll be able to do get the
job done by writing another implementation of the interface.
Right? Wrong! The requirement did come in - I’ve had to store
the files in S3. And only then I realised that IFilesStorage is
a leaky abstraction.</p>

<!-- more -->


<p>The problem lies in the last method, GetFilePath. This method
leaks out the implementation detail, that each file has a path
which can be used to access the file from the file system. Of
course, other storage mechanisms can’t provide such
functionality. This bummer makes switching storage mechanism
nearly impossible.</p>

<p>From a <a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a> point of view, this issue can be seen as a
violation of the Liskov substitution principle: the file system
based implementation of the interface cannot be replaced by
another implementation, as it will break the correctness of the
application.</p>

<p>The solution was to drop the problematic method and get rid of
the dependancy on file paths in the system.</p>

<p>Lesson learned: having abstractions will make the code more testable,
but if you’re aiming for supple design, make
sure your abstractions don’t leak out details about the
underlying architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection Patterns]]></title>
    <link href="http://www.vladikk.com/2012/09/10/dependency-injection-patterns/"/>
    <updated>2012-09-10T13:55:00+03:00</updated>
    <id>http://www.vladikk.com/2012/09/10/dependency-injection-patterns</id>
    <content type="html"><![CDATA[<p>Choosing the right pattern for implementing dependency injection is an important task and can affect your class’s usability and functionality. In this post I’ll overview 3 patterns of implementing dependency injection - constructor injection, property injection, builder (Joshua Bloch’s pattern, not GoF pattern).
For demonstration purposes we will work with a class called TextTranslator, that requires 3 dependencies: TextReader, TranslationService and TextWriter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sample code will be written in C#, but the examples are applicable to Java and other object oriented languages.</p>

<!-- more -->


<h2>Constructor Injection</h2>

<p>The implementation of this pattern is simple - expose a constructor that accepts its dependencies as arguments. This pattern works best for required dependencies - when the user of your class shouldn&#8217;t be able to instantiate an object without passing the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">textReader</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">TranslationSerivce</span> <span class="n">translationService</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// create the dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextWriter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class and pass its dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">(</span><span class="n">textReader</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">translationService</span><span class="p">,</span> <span class="n">textWriter</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros</h3>

<ul>
<li>This pattern is the best choice for required dependencies. It communicates clearly what instances should be provided. Also, this is the only choice if the injected dependency is to be stored in a readonly field.</li>
<li>Simple implementation.</li>
<li>Integrates easily with dependency injection containers - you are not required to add any special attributes in order for a container to supply the dependencies.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>This pattern causes the number of constructor parameters to grow. It&#8217;s considered a bad practice for a constructor to have more than 3-4 arguments. When this happens, it&#8217;s time to step back and consider some refactorings. First, being dependant on many objects may be a clear sign of breaking the single responsibility principle. If this is the case, split the functionality between multiple classes. Otherwise, use the Introduce Parameter Object refactoring.</li>
</ul>


<h2>Property Injection (Setter Injection)</h2>

<p>The class that needs a dependency exposes a property with public setter that is used for injection of the dependency. Since the dependencies are passed after the object is instantiated, this pattern works best for optional dependencies - when default instances of the dependencies are created in a constructor, and the user should be able to inject an alternative implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TextReader</span> <span class="n">TextReader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TranslationService</span> <span class="n">TranslationService</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TextWriter</span> <span class="n">TextWriter</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TextReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TranslationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TextWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// create and pass the dependencies</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TextReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TranslationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TextWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros</h3>

<ul>
<li>The best choice for optional dependencies.</li>
<li>Simple implementation.</li>
<li>Integrates with dependency injection containers (the properties that hold dependencies should be marked with a special attribute, e.g. “[Dependency]”).</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Not suitable  for required dependencies. It doesn’t communicate well what dependencies should be supplied, and allows the user not to supply them.</li>
<li>The dependency is mutable. Users can inject different implementations of the same dependency during the object’s lifetime.</li>
</ul>


<h2>Builder (Joshua Bloch’s pattern)</h2>

<p>This pattern gives you the best of two worlds - it allows you to limit the constructor parameters to the required dependencies, yet it still allows setting optional dependencies during the instantiation phase.
To implement this pattern you have to expose a public constructor that takes instances of the required dependencies as arguments and define private/protected fields to hold the optional dependencies. The optional dependencies can be set by using an instance of inner Builder class. Because Builder is an inner class, it can access and modify parent class’s protected and private fields.
Let’s see how this pattern can be implemented. In this example TranslationService is a required dependency, but TextReader and TextWriter are optional:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">(</span><span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// set the required dependency</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// set default values for the optional dependencies</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Builder</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Builder</span><span class="p">(</span><span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Builder</span> <span class="nf">WtihTextReader</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">textReader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Builder</span> <span class="nf">WithTextWriter</span><span class="p">(</span><span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">TextTranslator</span> <span class="nf">Build</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">(</span><span class="n">translationService</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">textReader</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">textWriter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// create the dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextWriter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class using its Builder</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">.</span><span class="n">Builder</span><span class="p">(</span><span class="n">translationService</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">WithTextReader</span><span class="p">(</span><span class="n">textReader</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">WithTextWriter</span><span class="p">(</span><span class="n">textWriter</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, Builder’s constructor mirrors its parent’s constructor - it accepts the same required dependencies. The optional dependencies are set via fluent interface that follows the “.WithFieldName(fieldValue)” convention. When all the values are passed, the Build method is called, which constructs a new instance and passes the available optional dependencies.</p>

<h3>Pros</h3>

<ul>
<li>Minimises the number of constructor arguments to the number of the required dependencies.</li>
<li>All the dependencies are immutable for the user.</li>
<li>Doesn’t require exposal of public setters for optional dependencies.</li>
<li>Dependency injection containers can supply required dependencies</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Extra code you have to write to implement this pattern.</li>
<li>Dependency injection containers cannot supply optional dependencies.</li>
</ul>


<h2>Conclusion</h2>

<p>Use Constructor Injection for required dependencies. For optional dependencies, if you can allow mutable dependencies, use Property Injection, otherwise implement the Builder pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disposing Objects Created by DI Container]]></title>
    <link href="http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/"/>
    <updated>2012-08-23T07:57:00+03:00</updated>
    <id>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container</id>
    <content type="html"><![CDATA[<p>The general rule says that if you created an object, then it is your responsibility to dispose it. Things get a bit tricky when objects are created by a dependency injection container. The responsibility of containers is to construct objects and inject the dependencies they need. An error I’ve seen people doing again and again is to dispose objects that were injected into an object via constructor or property injection. Consider the class “Foo” that requires an instance of class “Bar”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IDisposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">Bar</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Bar</span> <span class="n">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">bar</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">foo</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this approach is that the “Foo” class will know too much about the environment it runs in. At least it will think it does. An instance of “Foo” can’t and shouldn’t know who passed in the instance of “Bar”, and what he intends to do with it after the instance of “Foo” will be disposed.</p>

<!-- more -->


<p>So who should dispose “Bar”? As I said in the beginning of the post, if you created an instance, then you should dispose it. In our case, a dependency injection container has created an object and its dependencies, and therefore it should be responsible for disposing them. Usually containers will have a special method for disposing objects, for example “TearDown” in Unity and “Release” in Windsor.
Let’s see what the correct disposal strategy will look like in our Foo &amp; Bar case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IDisposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">Bar</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Bar</span> <span class="n">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">container</span><span class="p">.</span><span class="n">TearDown</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: Microsoft being Microsoft, didn’t implement the TearDown method correctly in their Unity framework. Out of the box, the method only disposes the passed object, and ignores the dependencies it created to construct it. The best solution to this issue is to use Rory Primrose’s <a href="http://www.neovolve.com/post/2010/06/18/Unity-Extension-For-Disposing-Build-Trees-On-TearDown.aspx">plugin that implements the absent functionality</a>.</p>
]]></content>
  </entry>
  
</feed>
