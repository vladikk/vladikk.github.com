<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vladikk : Developer, IBloggable]]></title>
  <link href="http://www.vladikk.com/atom.xml" rel="self"/>
  <link href="http://www.vladikk.com/"/>
  <updated>2013-09-20T02:31:09+03:00</updated>
  <id>http://www.vladikk.com/</id>
  <author>
    <name><![CDATA[Vladik Khononov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Serving Flask with Nginx]]></title>
    <link href="http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/"/>
    <updated>2013-09-12T22:37:00+03:00</updated>
    <id>http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Having spent the majority of my career in the Microsoft stack, lately I&#8217;ve decided to step out of my comfort zone and to dive into the world of open source software. The project I&#8217;m currently working on at my day job is a RESTful service. The service will be running on a commodity hardware, that should be able to scale horizontally as needed. To do the job I&#8217;ve decided to use Flask and Nginx. Flask is a lightweight Python web framework, and nginx is a highly stable web server, that works great on cheap hardware.</p>

<p>In this post I will guide you through the process of installing and configuring nginx server to host Flask based applications. The OS I&#8217;ll be using is Ubuntu 13.04.</p>

<h2>Prerequisites</h2>

<p>Before we install Nginx and other required software, let&#8217;s install some prerequisites. First, we will need PIP and Virtualenv:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python-setuptools
</span><span class='line'>sudo easy_install pip
</span><span class='line'>sudo pip install virtualenv
</span></code></pre></td></tr></table></div></figure>


<p>To install nginx from apt-get, we have to add Nginx repositories apt-get sources:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://nginx.org/keys/nginx_signing.key
</span><span class='line'>sudo apt-key add nginx_signing.key
</span><span class='line'>rm nginx_signing.key
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;deb http://nginx.org/packages/ubuntu/ raring nginx&quot;</span> | sudo tee -a /etc/apt/sources.list
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;deb-src http://nginx.org/packages/ubuntu/ raring nginx&quot;</span> | sudo tee -a /etc/apt/sources.list
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: At the time of this writing, I am using Ubuntu 13.04, therefore on lines 4 and 5 I&#8217;m using the codename &#8220;raring&#8221;. If you are running other version of Ubuntu, use your repository version instead. <a href="http://nginx.org/en/linux_packages.html#stable">More info on nginx.org</a></em></p>

<p>Upgrade existing packages and make sure you have the required compilers and tools for uWSGI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update <span class="o">&amp;&amp;</span> sudo apt-get upgrade
</span><span class='line'>sudo apt-get install build-essential python python-dev
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>Nginx</h2>

<p>Install and start Nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install nginx
</span><span class='line'>sudo /etc/init.d/nginx start
</span></code></pre></td></tr></table></div></figure>


<p>Nginx is a web server. It serves static files, however it cannot execute and host Python application. uWSGI fills that gap. Let&#8217;s install it first, and later we&#8217;ll configure nginx and uWSGI to talk to each other.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pip install uwsgi
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #1</h3>

<p>Browse to your server and you should get the Nginx greeting page:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_1.png" alt="nginx" /></p>

<h2>Sample application</h2>

<p>The application we will host is literally a &#8220;Hello, world!&#8221; application. It will serve only one page, and guess what text it will contain.
All the application related files will be stored at the /var/www/demoapp folder. Let&#8217;s create this folder, and initialize a virtual environment in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /var/www
</span><span class='line'>sudo mkdir /var/www/demoapp
</span><span class='line'><span class="nb">cd</span> /var/www/demoapp
</span><span class='line'>sudo virtualenv venv
</span><span class='line'>sudo venv/bin/pip install flask
</span></code></pre></td></tr></table></div></figure>


<p>Create the hello.py file, with the following code:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/hello.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">81</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #2</h3>

<p>Let&#8217;s execute the script we&#8217;ve just created:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo venv/bin/python hello.py
</span></code></pre></td></tr></table></div></figure>


<p>Now you can browse to your server&#8217;s port 81 and see the app in action:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_1.png" alt="flask" />
<em>Note: I&#8217;ve used port 81 because port 80 is already in use by nginx</em></p>

<p>Currently the app is served by Flask&#8217;s built in web server. It is a great tool for development needs, but it is not recommended in production environment. Let&#8217;s configure nginx to do the heavy lifting.</p>

<h2>Configuring Nginx</h2>

<p>Let&#8217;s start by removing the Nginx&#8217;s default site configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rm /etc/nginx/conf.d/default.conf
</span><span class='line'>sudo vim /var/www/demoapp/demoapp_nginx.conf
</span></code></pre></td></tr></table></div></figure>


<p>Instead create a new configuration file for our application <strong>/var/www/demoapp/demoapp_nginx.conf</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>server {
</span><span class='line'>    listen      80;
</span><span class='line'>    server_name localhost;
</span><span class='line'>    charset     utf-8;
</span><span class='line'>    client_max_body_size 75M;
</span><span class='line'>
</span><span class='line'>    location / { try_files $uri @yourapplication; }
</span><span class='line'>    location @yourapplication {
</span><span class='line'>        include uwsgi_params;
</span><span class='line'>        uwsgi_pass unix:/var/www/demoapp/demoapp_uwsgi.sock;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>And symlink the new file to nginx&#8217;s configuration files directory and restart nginx:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /var/www/demoapp/demoapp_nginx.conf /etc/nginx/conf.d/
</span><span class='line'>sudo /etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #3</h3>

<p>Browser to server&#8217;s public ip address, and you will be greeted by an error:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_3.png" alt="502" />
No need to worry, this is a &#8220;good&#8221; error. It says that nginx uses the configuration file we just created, but it has a trouble connecting to our Python application host, uWSGI. The connection to uWSGI is defined in the configuration file at line #10:</p>

<pre><code>uwsgi_pass unix:/var/www/demoapp/demoapp_uwsgi.sock;
</code></pre>

<p>It says that the communication between nginx and uWSGI is done via a socket file, that should be located at <em>/var/www/demoapp/demoapp_uwsgi.sock</em>. Since we still haven&#8217;t configured uWSGI yet, the file doesn&#8217;t exist, and Nginx returns the &#8220;bad gateway&#8221; error. Let&#8217;s fix this now.</p>

<h2>Configuring uWSGI</h2>

<p>Create a new uWSGI configuration file <strong>/var/www/demoapp/demoapp_uwsgi.ini</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[uwsgi]
</span><span class='line'>#application&#39;s base folder
</span><span class='line'>base = /var/www/demoapp
</span><span class='line'>
</span><span class='line'>#python module to import
</span><span class='line'>app = hello
</span><span class='line'>module = %(app)
</span><span class='line'>
</span><span class='line'>home = %(base)/venv
</span><span class='line'>pythonpath = %(base)
</span><span class='line'>
</span><span class='line'>#socket file&#39;s location
</span><span class='line'>socket = /var/www/demoapp/%n.sock
</span><span class='line'>
</span><span class='line'>#permissions for the socket file
</span><span class='line'>chmod-socket    = 666
</span><span class='line'>
</span><span class='line'>#the variable that holds a flask application inside the module imported at line #6
</span><span class='line'>callable = app
</span><span class='line'>
</span><span class='line'>#location of log files
</span><span class='line'>logto = /var/log/uwsgi/%n.log
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s create a new directory for uwsgi log files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir -p /var/log/uwsgi
</span></code></pre></td></tr></table></div></figure>


<h3>Milestone #4</h3>

<p>Let&#8217;s execute uWSGI and pass it the newly created configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo uwsgi --ini /var/www/demoapp/demoapp_uwsgi.ini
</span></code></pre></td></tr></table></div></figure>


<p>Next, browse to your server. Now nginx should be able to connect to uWSGI process:
<img src="http://www.vladikk.com/images/nginx-flask-ubuntu/milestone_4.png" alt="uwsgi" /></p>

<p>We are almost finished. The only thing left to do, is to configure uWSGI to run as a background service. That&#8217;s the duty of uWSGI Emperor.</p>

<h2>uWSGI Emperor</h2>

<p>uWSGI Emperor (quite a name, isn&#8217;t it?) is responsible for reading configuration files and spawing uWSGI processes to execute them.
Create a new upstart configuration file to execute emperor - <strong>/etc/init/uwsgi.conf</strong>:</p>

<figure class='code'><figcaption><span>/etc/init/uwsgi.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>description <span class="s2">&quot;uWSGI&quot;</span>
</span><span class='line'>start on runlevel <span class="o">[</span>2345<span class="o">]</span>
</span><span class='line'>stop on runlevel <span class="o">[</span>06<span class="o">]</span>
</span><span class='line'>respawn
</span><span class='line'>
</span><span class='line'>env <span class="nv">UWSGI</span><span class="o">=</span>/usr/local/bin/uwsgi
</span><span class='line'>env <span class="nv">LOGTO</span><span class="o">=</span>/var/log/uwsgi/emperor.log
</span><span class='line'>
</span><span class='line'><span class="nb">exec</span> <span class="nv">$UWSGI</span> --master --emperor /etc/uwsgi/vassals --die-on-term --uid nginx --gid nginx --logto <span class="nv">$LOGTO</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last line executes the uWSGI daemon and sets it to look for config files in the <strong>/etc/uwsgi/vassals</strong> folder. Let&#8217;s create this folder and symlink the configuration file we created earlier into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /etc/uwsgi <span class="o">&amp;&amp;</span> sudo mkdir /etc/uwsgi/vassals
</span><span class='line'>sudo ln -s /var/www/demoapp/demoapp_uwsgi.ini /etc/uwsgi/vassals
</span></code></pre></td></tr></table></div></figure>


<p>Also, the last line states the the user that will be used to execute the daemon is nginx. For simplicity&#8217;s sake, let&#8217;s set him as the owner of the application and log folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown -R nginx:nginx /var/www/demoapp/
</span><span class='line'>sudo chown -R nginx:nginx /var/log/uwsgi/
</span></code></pre></td></tr></table></div></figure>


<p>Since both, nginx and uWSGI, are now being run by the same user, we can make a security improvement to our uWSGI configuration. Open up the uwsgi config file and change the value of chmod-socket from <strong>666</strong> to <strong>644</strong>:</p>

<figure class='code'><figcaption><span>/var/www/demoapp/demoapp_uwsgi.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>...
</span><span class='line'>#permissions for the socket file
</span><span class='line'>chmod-socket    = 644
</span></code></pre></td></tr></table></div></figure>


<p>Now we can start the uWSGI job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo start uwsgi
</span></code></pre></td></tr></table></div></figure>


<p>Finally, both Nginx and uWSGI are configured to correctly serve our application on system start up.</p>

<h2>Troubleshooting</h2>

<p>If something goes wrong, the first place to check is the log files. By default, nginx writes error message to the file <strong>/var/log/nginx/errors.log</strong>.</p>

<p>We&#8217;ve configured uWSGI emperor to write it&#8217;s logs to <strong>/var/log/uwsgi/emperor.log</strong>. Also this folder contains separate log files for each configured application. In our case - <strong>/var/log/uwsgi/demoapp_uwsgi.log</strong>.</p>

<h2>P.S. Hosting Multiple Applications</h2>

<p>If you want to host multiple Flask applications on a single server, create a separate folder for each application, as we did earlier, and symlink nginx and uWSGI configuration files to the appropriate folder.</p>

<h2>P.P.S. Deploying Applications with Distribute</h2>

<p>To deploy Flask apps using <a href="https://pypi.python.org/pypi/distribute">distribute</a>, first follow the steps in <a href="http://flask.pocoo.org/docs/patterns/packages/#larger-applications">Flask documentation</a> to convert your application into a package. Next, copy the generated distribute setup package to the server, and use the virtual environment&#8217;s Python to install it. E.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /var/www/demoapp/venv/bin/python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>And last but not least, the &#8220;app&#8221; property of uWSGI configuration&#8217;s file should be equal to name of the package that holds the Flask application.</p>

<h2>P.P.P.S. Security Warning</h2>

<p>In the discussion about this post on Reddit, a user named d&#8217;Anjou made a valid point that, under no circumstances, you should grant root privileges to software, that cannot be trusted 100%. And the software you install from PyPI cannot be trusted.
This post is intended to guide you through the process of installing and configuring Nginx and uWSGI, however, on production environment you should setup a group of users, with proper permissions, and use it to both install and run the required software.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON2CSV]]></title>
    <link href="http://www.vladikk.com/2013/06/11/json2csv/"/>
    <updated>2013-06-11T16:05:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/11/json2csv</id>
    <content type="html"><![CDATA[<p>Last week I&#8217;ve needed a utility to convert a file containing json data to csv. I found many online solutions, but for some weird reason they didn&#8217;t support nested objects and arrays. So I wrote one, this time in python.
Grab it here - <a href="https://github.com/vladikk/json2csv">Github repository</a>.</p>

<h2>Usage</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python json2csv.py "input_file.json" "output_file.csv"</span></code></pre></td></tr></table></div></figure>


<p>If you pass in the following json file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;age&quot;</span><span class="p">:</span> <span class="mi">27</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;c#&quot;</span><span class="p">,</span> <span class="s2">&quot;vb&quot;</span><span class="p">,</span> <span class="s2">&quot;python&quot;</span> <span class="p">]</span>
</span><span class='line'>   <span class="p">},</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;middle&quot;</span><span class="p">:</span> <span class="s2">&quot;scottster&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;age&quot;</span><span class="p">:</span> <span class="mi">29</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;languages&quot;</span><span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;objective-c&quot;</span><span class="p">,</span> <span class="s2">&quot;c++&quot;</span> <span class="p">]</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll get the following csv file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>age,  id,    languages_0,    languages_1,    languages_2,    name_first, name_last,  name_middle
</span><span class='line'>27,   1,      c#,             vb,             python,         john,       johnson,
</span><span class='line'>29,   2,      objective-c,    c++,            ,               scott,      scottson,   scottster
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing SQL2JSON]]></title>
    <link href="http://www.vladikk.com/2013/06/09/sql2json/"/>
    <updated>2013-06-09T13:38:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/09/sql2json</id>
    <content type="html"><![CDATA[<p>If you&#8217;ll ever try to generate JSON file using Sql Server&#8217;s Management Studio, probably there&#8217;ll be lots of pain in your future. If you wanna save the pain, you can use SQL2JSON, an open source project I started last week.</p>

<p>The idea was born out of a need to generate a huge JSON file containing data from MSSQL database. After seeing our DBA struggling with formatting, escaping weird characters and unicode strings, I decided to write a small utility that will do just that - execute a sql query and capture its results as a json file.
You can grab it from <a href="https://github.com/vladikk/sql2json">Github repository</a>.</p>

<h2>Usage</h2>

<p>Suppose you have a table called &#8220;users&#8221; with the following records:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|user_id | first_name | last_name
</span><span class='line'>|--------|------------|----------
</span><span class='line'>|1       | john       | johnson
</span><span class='line'>|2       | scott      | scottson
</span><span class='line'>|3       | paul       | paulson</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>Example #1 - Simplest Case</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sql2json.exe -cs="Data Source=.;Initial Catalog=DB1;User Id=usr;Password=pwd;" -sql="select * from users" -output="users.json"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nt">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;paul&quot;</span><span class="p">,</span> <span class="nt">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;paulson&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example #2 - Nested Objects</h3>

<p>This example demonstrates the use of delimiters to build a json string containing nested objects</p>

<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">sql</span><span class="mi">2</span><span class="err">json.exe</span> <span class="err">-cs=</span><span class="s2">&quot;Data Source=.;Initial Catalog=DB1;User Id=usr;Password=pwd;&quot;</span> <span class="err">-sql=</span><span class="s2">&quot;select user_id, first_name as &#39;name::first&#39;, last_name as &#39;name::last&#39; from users&quot;</span> <span class="err">-output=</span><span class="s2">&quot;users.json&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>users.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;johnson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;scott&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;scottson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;user_id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;first&quot;</span><span class="p">:</span> <span class="s2">&quot;paul&quot;</span><span class="p">,</span> <span class="nt">&quot;last&quot;</span><span class="p">:</span> <span class="s2">&quot;paulson&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Advanced Scenarios</h2>

<p>If you need to include custom calculations or aggregations in your JSON objects you can either pre-calculate them in your sql query, or if you are more adventurous, you can write your own implementation of ITransformer to execute the required logic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode file names in Python 2.7]]></title>
    <link href="http://www.vladikk.com/2013/06/01/unicode-file-names-in-python/"/>
    <updated>2013-06-01T14:58:00+03:00</updated>
    <id>http://www.vladikk.com/2013/06/01/unicode-file-names-in-python</id>
    <content type="html"><![CDATA[<p>Today I wrote a small script to find and delete duplicate files. To do this task I needed to iterate over files in a specific folder, and calculate md5 checksum for each file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">folder</span><span class="p">,</span> <span class="n">subs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>          <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fh</span><span class="p">:</span>
</span><span class='line'>              <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the source folder contains a file or a folder with unicode characters in it, execution of the code results in this bummer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="ne">IOError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">22</span><span class="p">]</span> <span class="n">invalid</span> <span class="n">mode</span> <span class="p">(</span><span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">filename</span><span class="p">:</span> <span class="s">&#39;files</span><span class="se">\\</span><span class="s">????????? ????? ????????.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>The solution was easy. As it turned out, the os.walk method can return values encoded either as ASCII or as Unicode strings. It chooses the encoding based on the encoding of the &#8220;top path&#8221; argument. Originally I was passing an ASCII string. Once it was encoded to UTF-8 the problem was solved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">folder</span><span class="p">,</span> <span class="n">subs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">walk</span><span class="p">(</span><span class="nb">unicode</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;utf-8&#39;</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uncoupling Configuration Files]]></title>
    <link href="http://www.vladikk.com/2013/05/14/uncoupling-configuration-files/"/>
    <updated>2013-05-14T17:34:00+03:00</updated>
    <id>http://www.vladikk.com/2013/05/14/uncoupling-configuration-files</id>
    <content type="html"><![CDATA[<p>Tight coupling is a known source for inflexible and hard to test code. In this post I want to talk about a rather unexpected source of tight coupling - configuration files.
Configuration files are external dependencies. As other external dependencies, its infrastructure may change in the future, and it should be easily mocked for unit testing. Modern software frameworks provide means for easy access to the values stored in configuration files. In the .NET framework configuration files can be accessed using the ConfigurationManager:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;Foo&quot;</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;Bar&quot;</span> <span class="na">value=</span><span class="s">&quot;2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appSettings&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">int</span> <span class="n">foo</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSetttings</span><span class="p">[</span><span class="err">“</span><span class="n">Foo</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">bar</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">Bar</span><span class="err">”</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ConfigurationManager makes it trivial to access data in the config file, however in most cases it also introduces various code smells that make the code tight coupled and hard to test. In the next sections I’ll introduce a simple class and will use it to demonstrate the code smells and violations of principles of clean object oriented design. The code will be gradually refactored to a better and cleaner solution.</p>

<!-- more -->


<h1>FooBarBaz</h1>

<p>Consider the following class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="p">=</span> <span class="kt">bool</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">bar</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">baz</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">baz</span><span class="err">”</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">bar</span> <span class="p">:</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class depends on three values stored in the configuration file - a boolean “foo”, and two integers, “bar” and “baz”. Let’s see what issues we can find in this simple code.</p>

<h3>Smell #1 Impaired Testability</h3>

<p>How would you test the “Execute” method? Probably, you would have to assign the Foo’s value manually using ConfigurationManager in each test case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[Test]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Test_if_foo_is_false_then____</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="na">[Test]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Test_if_foo_is_true_then____</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a viable approach, yet it is prone to a flaw. To test the method you have to be familiar with its internals. You have to know where the class loads its configuration from, what framework it uses, and finally, what configuration keys are.
More often than not, hard to test code is guilty of violating principles of clean object oriented design. Let’s see what violations we can identify here.</p>

<h3>Smell #2 Violation of the Single Responsibility Principle (SRP)</h3>

<p>Currently this class does two things:</p>

<ul>
<li>Executing some logic defined in the “Execute” method</li>
<li>Loading and parsing values from the configuration file</li>
</ul>


<p>These two responsibilities are a clear violation of the Single Responsibility Principle, which states that each class should have only one responsibility, or in other words, every class should have only one reason for change. Currently FooBarBaz will be change if its logic changes or if there are changes in the configuration storage.</p>

<h3>Smell #3 Violation of the Dependency Inversion Principle (DIP)</h3>

<p>According to the Dependency Inversion Principle, high level modules should not depend on low level modules. In this case, the logic defined in the “Execute” method is a part of a high level module, but ConfigurationManager is a low level implementation detail. The two are tightly coupled because of the direct reference and use of ConfigurationManager by FooBarBaz.</p>

<h3>Smell #4 Violation of the Don’t Repeat Yourself Principle (DRY)</h3>

<p>Since ConfigurationManager returns a string representation of each configuration value, the class is also responsible for casting the strings to the correct types. This can be seen as a violation of the DRY principle: Each parameter’s type is defined by its variable’s type, and also in the parsing part, which states once again to what type the value should be parsed.</p>

<h1>Refactoring #1</h1>

<p>To get rid of these smells, let’s remove the dependency on ConfigurationManager, and make it a responsibility of FooBarBaz’s caller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">bool</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="kt">bool</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">,</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">foo</span> <span class="p">=</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">baz</span> <span class="p">=</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">bar</span> <span class="p">:</span> <span class="n">baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This refactoring provides the following benefits:
The class is responsible only for executing the logic, and therefor it has a single reason for change.
All execution flows can be easily tested by passing the configurations values to the constructor.</p>

<h3>Smell #5 Many Constructor Arguments</h3>

<p>The obvious downside of this refactoring is that the number of constructor arguments has grown. Currently the constructor has 3 parameters. It&#8217;s advisable to minimize the number of constructor&#8217;s arguments. Let&#8217;s see how we shrink the number of arguments to one.</p>

<h1>Refactoring #2</h1>

<p>Since the three arguments, foo, bar, and baz, are naturally go together, we can apply the “Introduce Parameter Object” refactoring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="n">Config</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="n">Config</span> <span class="n">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">config</span> <span class="p">=</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">class</span> <span class="nc">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Config</span><span class="p">(</span><span class="kt">bool</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bar</span><span class="p">,</span> <span class="kt">int</span> <span class="n">baz</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Foo</span> <span class="p">=</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="n">Baz</span> <span class="p">=</span> <span class="n">baz</span><span class="p">;</span>   
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple refactoring reduces the number of constructor arguments to one, however it introduces another code smell.</p>

<h3>Smell #6 Too Much Ceremony</h3>

<p>In case we’ll need to introduce a new configuration parameter, it will require too much ceremony - adding it in at least four places:</p>

<ol>
<li>New public property should be added to hold the new value</li>
<li>The new value should be added to Config’s constructor</li>
<li>Assignment of the value passed to the constructor to the new public property</li>
<li>The code that loads values from configuration source and creates an instance of the Config object</li>
</ol>


<p>Adding the new public property is probably inevitable, but let’s see how the code can be refactored to eliminate the other three modifications.</p>

<h1>Refactoring #3</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">readonly</span> <span class="n">Config</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nf">FooBarBaz</span><span class="p">(</span><span class="n">Config</span> <span class="n">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="n">config</span> <span class="p">=</span> <span class="n">config</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">interface</span> <span class="n">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, converting the Config class to an interface reduced the required modifications to a bare minimum. On the other hand, it looks like an added headache for the caller, the code that has to pass an instance of the Config object. Now it has both to load the data from the configuration storage and to provide its own implementation of the Config interface. Let’s see how this burden can be minimized:</p>

<h1>ConfigurationFactory</h1>

<p>The process of instantiating configuration objects will be the responsibility of this abstract factory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">ConfigurationFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">TConfig</span> <span class="n">Load</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="n">class</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An implementation of this interface is a low-level detail and therefore should reside in low-level modules of the application. Let&#8217;s see a simple implementation that uses .NET’s ConfigurationManager as configuration source.</p>

<h1>AppSettingsConfigurationFactory</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">using</span> <span class="nn">ImpromptuInterface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AppSettingsConfigurationFactory</span> <span class="p">:</span> <span class="n">ConfigurationFactory</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TConfig</span> <span class="n">Build</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">TConfig</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">typeName</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">FullName</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">).</span><span class="n">Last</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">properties</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">configDict</span> <span class="p">=</span> <span class="p">(</span><span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;)</span><span class="k">new</span> <span class="n">ExpandoObject</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">property</span> <span class="k">in</span> <span class="n">properties</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}.{1}&quot;</span><span class="p">,</span> <span class="n">typeName</span><span class="p">,</span> <span class="n">property</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">stringValue</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">castedValue</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ChangeType</span><span class="p">(</span><span class="n">stringValue</span><span class="p">,</span> <span class="n">property</span><span class="p">.</span><span class="n">PropertyType</span><span class="p">);</span>
</span><span class='line'>      <span class="n">configDict</span><span class="p">[</span><span class="n">property</span><span class="p">.</span><span class="n">Name</span><span class="p">]</span> <span class="p">=</span> <span class="n">castedValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">configDict</span><span class="p">.</span><span class="n">ActLike</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class harnesses the ImpromptuInterface library and some low-level magic to determine on the fly what configuration values should be loaded, and to create a class that implements the interface TConfig.
Each key stored in the configuration file is a concatenation of enclosing class&#8217;s name(FooBarBaz), configuration interface(Config), and the configuration parameter name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Foo&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Bar&quot;</span> <span class="na">value=</span><span class="s">&quot;7&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;FooBarBaz+Config.Baz&quot;</span> <span class="na">value=</span><span class="s">&quot;17&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appSettings&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Usage</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">var</span> <span class="n">configFactory</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AppSettingsConfigurationFactory</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="n">configFactory</span><span class="p">.</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">FooBarBaz</span><span class="p">.</span><span class="n">Config</span><span class="p">&gt;();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FooBarBaz</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To instantiate the FooBarBaz class, the caller should get an instance of ConfigurationFactory, use it to build an instance of the Config object, and finally create an instance of FooBarBaz using the Config object.
The process can complicate things if you are using a dependency injection container. In this case, a custom plugin should be written that will identify Config interface and build them using the set up implementation of ConfigurationFactory.</p>

<h1>Refactoring #4: Simplifying The Usage</h1>

<p>The three step process of instantiating a class can be seen as an redundant ceremony that can be simplified. To simplify the process, let’s introduce a base class for classes that require configuration settings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Configurable</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">TConfig</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">TConfig</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="nf">Configurable</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Configuration</span> <span class="p">=</span> <span class="n">ServiceLocator</span><span class="p">[</span><span class="err">“</span><span class="n">ConfigurationFactory</span><span class="err">”</span><span class="p">].</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">TConfig</span><span class="p">&gt;();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And FooBarBaz inheriting Configurable<TConfig>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">FooBarBaz</span> <span class="p">:</span> <span class="n">Configurable</span><span class="p">&lt;</span><span class="n">Config</span><span class="p">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">bool</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">config</span><span class="p">.</span><span class="n">Foo</span> <span class="p">==</span> <span class="k">value</span> <span class="p">?</span> <span class="n">config</span><span class="p">.</span><span class="n">Bar</span> <span class="p">:</span> <span class="n">config</span><span class="p">.</span><span class="n">Baz</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">interface</span> <span class="n">Config</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Bar</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span>  <span class="n">Baz</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now FooBarBaz became even smaller. It no longer needs to explicitly hold an instance of a Config object, the base class does it. The base class also uses the <a href="http://en.wikipedia.org/wiki/Service_locator_pattern">ServiceLocator pattern</a> to acquire a ConfigurationFactory and build the configuration object. It also exposes a public property, “Configuration”, that can be used for <a href="http://blog.kh-v.net/2012/09/10/dependency-injection-patterns/">property injection</a> of the configuration object, e.g. for testing purposes.</p>

<h1>Conclusion</h1>

<p> Therefore, as with other dependencies, it should be encapsulated to guard against changes in the future and to make testing easier. In this post I presented an approach that I use to encapsulate configs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning From Mistakes: Leaky Abstractions]]></title>
    <link href="http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions/"/>
    <updated>2012-10-15T03:10:00+02:00</updated>
    <id>http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions</id>
    <content type="html"><![CDATA[<p>On the project I’m working on I’ve had a requirement to store and read files
from the file system. Alse the files had to be accessible from the web.</p>

<p>Having a gut feeling that the infrastructure may change as the business will
grow, I decided to hide operations on the file system behind an interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IFilesStorage</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">StoreFile</span><span class="p">(</span><span class="n">Stream</span> <span class="n">stream</span><span class="p">,</span> <span class="kt">string</span> <span class="n">fileName</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Stream</span> <span class="nf">GetFile</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GetFileUrl</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">string</span> <span class="nf">GetFilePath</span><span class="p">(</span><span class="kt">string</span> <span class="n">virtualPath</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it looks, if someday I’ll need to switch from the file
system to another storage mechanism, I’ll be able to do get the
job done by writing another implementation of the interface.
Right? Wrong! The requirement did come in - I’ve had to store
the files in S3. And only then I realised that IFilesStorage is
a leaky abstraction.</p>

<!-- more -->


<p>The problem lies in the last method, GetFilePath. This method
leaks out the implementation detail, that each file has a path
which can be used to access the file from the file system. Of
course, other storage mechanisms can’t provide such
functionality. This bummer makes switching storage mechanism
nearly impossible.</p>

<p>From a <a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a> point of view, this issue can be seen as a
violation of the Liskov substitution principle: the file system
based implementation of the interface cannot be replaced by
another implementation, as it will break the correctness of the
application.</p>

<p>The solution was to drop the problematic method and get rid of
the dependancy on file paths in the system.</p>

<p>Lesson learned: having abstractions will make the code more testable,
but if you’re aiming for supple design, make
sure your abstractions don’t leak out details about the
underlying architecture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection Patterns]]></title>
    <link href="http://www.vladikk.com/2012/09/10/dependency-injection-patterns/"/>
    <updated>2012-09-10T13:55:00+03:00</updated>
    <id>http://www.vladikk.com/2012/09/10/dependency-injection-patterns</id>
    <content type="html"><![CDATA[<p>Choosing the right pattern for implementing dependency injection is an important task and can affect your class’s usability and functionality. In this post I’ll overview 3 patterns of implementing dependency injection - constructor injection, property injection, builder (Joshua Bloch’s pattern, not GoF pattern).
For demonstration purposes we will work with a class called TextTranslator, that requires 3 dependencies: TextReader, TranslationService and TextWriter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sample code will be written in C#, but the examples are applicable to Java and other object oriented languages.</p>

<!-- more -->


<h2>Constructor Injection</h2>

<p>The implementation of this pattern is simple - expose a constructor that accepts its dependencies as arguments. This pattern works best for required dependencies - when the user of your class shouldn&#8217;t be able to instantiate an object without passing the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="k">readonly</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">textReader</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">TranslationSerivce</span> <span class="n">translationService</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// create the dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextWriter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class and pass its dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">(</span><span class="n">textReader</span><span class="p">,</span>
</span><span class='line'>                                            <span class="n">translationService</span><span class="p">,</span> <span class="n">textWriter</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros</h3>

<ul>
<li>This pattern is the best choice for required dependencies. It communicates clearly what instances should be provided. Also, this is the only choice if the injected dependency is to be stored in a readonly field.</li>
<li>Simple implementation.</li>
<li>Integrates easily with dependency injection containers - you are not required to add any special attributes in order for a container to supply the dependencies.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>This pattern causes the number of constructor parameters to grow. It&#8217;s considered a bad practice for a constructor to have more than 3-4 arguments. When this happens, it&#8217;s time to step back and consider some refactorings. First, being dependant on many objects may be a clear sign of breaking the single responsibility principle. If this is the case, split the functionality between multiple classes. Otherwise, use the Introduce Parameter Object refactoring.</li>
</ul>


<h2>Property Injection (Setter Injection)</h2>

<p>The class that needs a dependency exposes a property with public setter that is used for injection of the dependency. Since the dependencies are passed after the object is instantiated, this pattern works best for optional dependencies - when default instances of the dependencies are created in a constructor, and the user should be able to inject an alternative implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TextReader</span> <span class="n">TextReader</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TranslationService</span> <span class="n">TranslationService</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TextWriter</span> <span class="n">TextWriter</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TextReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TranslationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">TextWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// create and pass the dependencies</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TextReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TranslationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="n">translator</span><span class="p">.</span><span class="n">TextWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pros</h3>

<ul>
<li>The best choice for optional dependencies.</li>
<li>Simple implementation.</li>
<li>Integrates with dependency injection containers (the properties that hold dependencies should be marked with a special attribute, e.g. “[Dependency]”).</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Not suitable  for required dependencies. It doesn’t communicate well what dependencies should be supplied, and allows the user not to supply them.</li>
<li>The dependency is mutable. Users can inject different implementations of the same dependency during the object’s lifetime.</li>
</ul>


<h2>Builder (Joshua Bloch’s pattern)</h2>

<p>This pattern gives you the best of two worlds - it allows you to limit the constructor parameters to the required dependencies, yet it still allows setting optional dependencies during the instantiation phase.
To implement this pattern you have to expose a public constructor that takes instances of the required dependencies as arguments and define private/protected fields to hold the optional dependencies. The optional dependencies can be set by using an instance of inner Builder class. Because Builder is an inner class, it can access and modify parent class’s protected and private fields.
Let’s see how this pattern can be implemented. In this example TranslationService is a required dependency, but TextReader and TextWriter are optional:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TextTranslator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">TextTranslator</span><span class="p">(</span><span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// set the required dependency</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// set default values for the optional dependencies</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultTextWriter</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Builder</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TextReader</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Builder</span><span class="p">(</span><span class="n">TranslationService</span> <span class="n">translationService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">translationService</span> <span class="p">=</span> <span class="n">translationService</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Builder</span> <span class="nf">WtihTextReader</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">textReader</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">Builder</span> <span class="nf">WithTextWriter</span><span class="p">(</span><span class="n">TextWriter</span> <span class="n">textWriter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="n">TextTranslator</span> <span class="nf">Build</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">(</span><span class="n">translationService</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">textReader</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">textReader</span> <span class="p">=</span> <span class="n">textReader</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">textWriter</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">textWriter</span> <span class="p">=</span> <span class="n">textWriter</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// create the dependencies</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextReader</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translationService</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TranslationService</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">textWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextWriter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// instantiate the TextTranslator class using its Builder</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">translator</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TextTranslator</span><span class="p">.</span><span class="n">Builder</span><span class="p">(</span><span class="n">translationService</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">WithTextReader</span><span class="p">(</span><span class="n">textReader</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">WithTextWriter</span><span class="p">(</span><span class="n">textWriter</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, Builder’s constructor mirrors its parent’s constructor - it accepts the same required dependencies. The optional dependencies are set via fluent interface that follows the “.WithFieldName(fieldValue)” convention. When all the values are passed, the Build method is called, which constructs a new instance and passes the available optional dependencies.</p>

<h3>Pros</h3>

<ul>
<li>Minimises the number of constructor arguments to the number of the required dependencies.</li>
<li>All the dependencies are immutable for the user.</li>
<li>Doesn’t require exposal of public setters for optional dependencies.</li>
<li>Dependency injection containers can supply required dependencies</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Extra code you have to write to implement this pattern.</li>
<li>Dependency injection containers cannot supply optional dependencies.</li>
</ul>


<h2>Conclusion</h2>

<p>Use Constructor Injection for required dependencies. For optional dependencies, if you can allow mutable dependencies, use Property Injection, otherwise implement the Builder pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disposing Objects Created by DI Container]]></title>
    <link href="http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/"/>
    <updated>2012-08-23T07:57:00+03:00</updated>
    <id>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container</id>
    <content type="html"><![CDATA[<p>The general rule says that if you created an object, then it is your responsibility to dispose it. Things get a bit tricky when objects are created by a dependency injection container. The responsibility of containers is to construct objects and inject the dependencies they need. An error I’ve seen people doing again and again is to dispose objects that were injected into an object via constructor or property injection. Consider the class “Foo” that requires an instance of class “Bar”:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IDisposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">Bar</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Bar</span> <span class="n">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">bar</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">foo</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with this approach is that the “Foo” class will know too much about the environment it runs in. At least it will think it does. An instance of “Foo” can’t and shouldn’t know who passed in the instance of “Bar”, and what he intends to do with it after the instance of “Foo” will be disposed.</p>

<!-- more -->


<p>So who should dispose “Bar”? As I said in the beginning of the post, if you created an instance, then you should dispose it. In our case, a dependency injection container has created an object and its dependencies, and therefore it should be responsible for disposing them. Usually containers will have a special method for disposing objects, for example “TearDown” in Unity and “Release” in Windsor.
Let’s see what the correct disposal strategy will look like in our Foo &amp; Bar case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">IDisposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="n">Bar</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Bar</span> <span class="n">bar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">bar</span> <span class="p">=</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="n">container</span><span class="p">.</span><span class="n">TearDown</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: Microsoft being Microsoft, didn’t implement the TearDown method correctly in their Unity framework. Out of the box, the method only disposes the passed object, and ignores the dependencies it created to construct it. The best solution to this issue is to use Rory Primrose’s <a href="http://www.neovolve.com/post/2010/06/18/Unity-Extension-For-Disposing-Build-Trees-On-TearDown.aspx">plugin that implements the absent functionality</a>.</p>
]]></content>
  </entry>
  
</feed>
