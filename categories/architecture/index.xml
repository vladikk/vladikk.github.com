<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Rants on Software Design</title>
    <link>https://vladikk.com/categories/Architecture/</link>
    <description>Recent content in Architecture on Rants on Software Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vlad Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vlad Khononov)</webMaster>
    <lastBuildDate>Sat, 29 Mar 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vladikk.com/categories/Architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Golden Age of Modularity</title>
      <link>https://vladikk.com/2025/03/30/golden-age-of-modularity/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2025/03/30/golden-age-of-modularity/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/ai-boundaries.png&#34; alt=&#34;The Golden Age of Modularity: Why Modern Architecture‚Äîand AI‚ÄîDepend on Better Boundaries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My news feed these days:&lt;br /&gt;
‚ÄúTake a look at the app I built with zero coding skills!‚Äù&lt;br /&gt;
‚Äú50% of our code is now written by AI!‚Äù&lt;br /&gt;
‚ÄúEngineering hiring freeze: AI is the future!‚Äù&lt;/p&gt;

&lt;p&gt;Alright then. Time for me to jump on the vibe coding bandwagon and share an opinion that some may categorize as a hot take.&lt;/p&gt;

&lt;p&gt;The notion of modularity was introduced to software engineering way back in the late 1960s. Today ‚Äî many decades later ‚Äî we&amp;rsquo;re entering the golden age of modularity. To understand why, let‚Äôs first define what modularity actually is.&lt;/p&gt;

&lt;h2 id=&#34;modularity&#34;&gt;Modularity&lt;/h2&gt;

&lt;p&gt;There are many ways to define modularity ‚Äî from designing software systems as interchangeable LEGO blocks to chasing the holy grail of reusable ‚Äúbuilding blocks‚Äù meant to be plugged into anything and everything. I prefer a more practical perspective. To me, a modular design satisfies two key criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you need to change the codebase‚Äîwhether to adjust existing functionality or introduce a new one‚Äîit‚Äôs crystal clear what parts of the system need to be touched. Ideally, the number of affected components should be as small as possible. Preferably, just one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you introduce a change to a modular system, you know exactly what the effect of that change will be. You can predict the system‚Äôs behavior.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part III: The Hard Basics</title>
      <link>https://vladikk.com/2024/10/13/aws-eda-iii/</link>
      <pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/13/aws-eda-iii/</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;https://vladikk.com/2024/10/12/aws-eda-ii/&#34;&gt;previous post&lt;/a&gt; in this series discussed the reliability issues many messaging-based systems suffer from and how to address them by implementing the outbox pattern. This post switches the focus from publishing to processing messages published by other components of the system.&lt;/p&gt;

&lt;p&gt;As before, I will start by defining the problem we have to tackle.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Let‚Äôs revisit the outbox pattern once more. It addresses the common problem of publishing messages after the underlying business transaction has already been committed: the events might not get published at all. By implementing the pattern, you ensure that all the events will be published‚Äî&lt;em&gt;at least once&lt;/em&gt;. Let me explain the last part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/aws-eda-2/fig-1.png&#34; alt=&#34;The outbox pattern&#34; /&gt;
&lt;em&gt;Figure 1: The outbox pattern&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part II: The Advanced Basics</title>
      <link>https://vladikk.com/2024/10/12/aws-eda-ii/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/12/aws-eda-ii/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://vladikk.com/2024/09/28/aws-eda/&#34;&gt;previous post in the series&lt;/a&gt;, I discussed the basic building blocks for implementing event-driven architecture (EDA) using AWS managed services. This post is about the &lt;em&gt;advanced&lt;/em&gt; basics. It‚Äôs advanced because, based on my consulting experience, very few companies apply the practices I want to discuss. However, I still consider this as basics because these practices are not optional but essential for implementing reliable messaging-based systems.&lt;/p&gt;

&lt;p&gt;Although the examples in this post use AWS services, the material applies to any system, regardless of the infrastructure it runs on. The implementation might differ, but the underlying principles remain the same.&lt;/p&gt;

&lt;p&gt;Since this post is about a pattern‚Äîand patterns, by definition, are repeatable solutions to commonly occurring problems‚ÄîI want to begin by discussing a commonly overlooked problem in EDA-based systems.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;In the previous post, I suggested using AWS SNS for publishing messages in an event-driven system. Here‚Äôs a common example of how such publishing is carried out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...

sns.publish(
    TopicArn=users_topic_arn,
    Message=json.dumps({
        &#39;event_type&#39;: &#39;user_registered&#39;,
        &#39;event_id&#39;: str(uuid.uuid4()),
        &#39;user_id&#39;: &#39;USER12345&#39;,
        &#39;name&#39;: &#39;John Doe&#39;,
        &#39;email&#39;: &#39;john.doe@example.com&#39;,
        &#39;source&#39;: &#39;mobile_app&#39;,
        &#39;registration_date&#39;: &#39;2024-10-11T20:01:00Z&#39;
    })
)

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, an event of type &lt;code&gt;user_registered&lt;/code&gt; is published to an SNS topic. But did that event come from thin air? Is that all services do, just publish messages? Of course not. The event is part of a larger business process that typically involves updating some state in an operational database before notifying external components about it. A more accurate representation of this process would look like this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Essence of Coupling and Cohesion in Under 500 Words</title>
      <link>https://vladikk.com/2024/10/09/coupling-and-cohesion/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/09/coupling-and-cohesion/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/strength-and-distance.png&#34; alt=&#34;Integration Strength and Distance&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you couple two components, they need to share some form of knowledge: public interfaces, functional behavior, implementation details, or other types of information. Let‚Äôs call it the integration strength. The more knowledge is shared, the stronger the integration. The stronger the integration, the more both components will have to change together. Therefore, you should always look to minimize the integration strength. That said, minimizing integration strength isn‚Äôt always possible‚Äîsometimes, extensive shared knowledge is necessary. For example, when the components implement closely related business functionalities.&lt;/p&gt;

&lt;p&gt;Another important property of integrated components is the distance between them. For example, objects in a module are located closer to each other than the source code of two microservices. The greater the distance, the higher the induced cognitive load and coordination challenges, and the more effort is needed to change the integrated components simultaneously.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs examine four extreme combinations of the two dimensions:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Balancing Coupling in Software Designüéâ</title>
      <link>https://vladikk.com/2024/10/08/lddd-bcisd/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/08/lddd-bcisd/</guid>
      <description>&lt;p&gt;Frist of all, today is the üêí book‚Äôs birthday! üéâ&lt;/p&gt;

&lt;p&gt;Exactly three years ago, &lt;em&gt;Learning Domain-Driven Design&lt;/em&gt; was published! And what a birthday present the monkey received: today marks the official release of &lt;em&gt;Balancing Coupling in Software Design&lt;/em&gt;! The new book is available in print and electronic formats on &lt;a href=&#34;https://amzn.to/3BIIPyk&#34;&gt;Amazon&lt;/a&gt;, &lt;a href=&#34;https://click.linksynergy.com/deeplink?id=XLXvHJZS*qY&amp;amp;mid=24808&amp;amp;murl=https%3A%2F%2Fwww.informit.com%2Fstore%2Fbalancing-coupling-in-software-design-universal-design-9780137353484&#34;&gt;InformIT&lt;/a&gt;, and other major book stores üéâ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/lddd-three-years.png&#34; alt=&#34;Learning Domain-Driven Design&#39;s third anniversary&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part I: The Basics</title>
      <link>https://vladikk.com/2024/09/28/aws-eda/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/09/28/aws-eda/</guid>
      <description>&lt;p&gt;The abundance of services provided by AWS often makes it possible to implement the same functionality in different ways. In the case of messaging systems, AWS offers services such as Simple Notification Service (SNS), Simple Queue Service (SQS), EventBridge, Kinesis, and Managed Streaming for Apache Kafka (MSK). It may seem that at least a subset of these services duplicates the same functionality. In this post, I want to describe my go-to architecture and explain why, in my opinion, it is the simplest, most cost-effective, and robust solution for the majority of cases.&lt;/p&gt;

&lt;h2 id=&#34;event-driven-architecture&#34;&gt;Event-Driven Architecture&lt;/h2&gt;

&lt;p&gt;Components of an event-driven system communicate by publishing and subscribing to events. The asynchronous integration offers significant non-functional advantages. For example, it decouples the integrated components‚Äô lifecycles. To a certain degree, the system can keep functioning even in the face of unavailability of some of its services, thus also reducing the coordination overhead needed to deploy updated components, and to evolve the system.&lt;/p&gt;

&lt;p&gt;A basic event-driven integration is comprised of two parts: a component of the system can publish events describing important occurrences in its lifecycle, and it can react (subscribe) to events published by other parts of the system. Let‚Äôs see what managed services we can leverage for implementing this.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Untangling Microservices, or Balancing Complexity in Distributed Systems</title>
      <link>https://vladikk.com/2020/04/09/untangling-microservices/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2020/04/09/untangling-microservices/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/untangling-microservices/header.png&#34; alt=&#34;Untangling Microservices, or Balancing Complexity in Distributed Systems&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The microservices honeymoon period is over. Uber is refactoring thousands of microservices into a more manageable solution [1]; Kelsey Hightower is predicting monoliths are the future [2]; and even Sam Newman is declaring that microservices should never be the default choice, but rather a last resort [3].&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s going on here? Why have so many projects become unmaintainable, despite microservices‚Äô promise of simplicity and flexibility? Or are monoliths better, after all?&lt;/p&gt;

&lt;p&gt;In this post, I want to address these questions. You will learn about common design issues that turn microservices into distributed big balls of mud ‚Äì and, of course, how you can avoid them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Anti-Pattern: Optimistic Consistency</title>
      <link>https://vladikk.com/2019/04/18/optimistic-consistency/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2019/04/18/optimistic-consistency/</guid>
      <description>Ladies and Gentlemen, lo and behold a new consistency model - ‚ÄúOptimistic Consistency‚Äù. Implementation of this pattern is quite simple: commit as many transactions as you want, against as many storage mechanisms as you need. That‚Äôs all. Let‚Äôs see an example.
Example Say as the result of some user‚Äôs operation the system has to:
 Modify data in MongoDB Publish some events to Kafka Update search model in Elasticsearch; and Execute an operation on some remote system  You implement this logic by executing those operations one after another.</description>
    </item>
    
    <item>
      <title>Zen of Software Engineering</title>
      <link>https://vladikk.com/2019/01/29/zen-software-engineering/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2019/01/29/zen-software-engineering/</guid>
      <description>There is a pet peeve of mine, that I‚Äôm encountering way too often: the condition I call Silverbulletitis. This virus spreads among developers on many levels ‚Äî juniors, seniors, and even architects. In this post I‚Äôd like talk about why this condition is dangerous, and how it can be treated.
Symptoms All too often you can hear statements that some tool or technique is bad, but another one is the greatest thing since sliced bread.</description>
    </item>
    
    <item>
      <title>Tackling Complexity in CQRS</title>
      <link>https://vladikk.com/2017/03/20/tackling-complexity-in-cqrs/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2017/03/20/tackling-complexity-in-cqrs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/cqrs/title-img.jpg&#34; alt=&#34;Tackling Complexity in CQRS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The CQRS pattern can do wonders: it can maximize scalability, performance, security, and even &lt;a href=&#34;http://codebetter.com/gregyoung/2010/02/20/cqrs-and-cap-theorem/&#34;&gt;‚Äúbeat‚Äù the CAP theorem&lt;/a&gt;. Nonetheless, CQRS has acquired a controversial name because of the complexity it introduces. For instance, &lt;a href=&#34;https://martinfowler.com/bliki/CQRS.html&#34;&gt;in his article on CQRS&lt;/a&gt;, Martin Fowler argues that the pattern should be applied sparingly and even cautiously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚Äú‚Ä¶ for most systems CQRS adds risky complexity‚Äù&lt;/li&gt;
&lt;li&gt;‚Äú‚Ä¶ you should be very cautious about using CQRS‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúSo while CQRS is a pattern that&amp;rsquo;s good to have in the toolbox, beware that it is difficult to use well and you can easily chop off important bits if you mishandle it.‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From my point of view, the CQRS-induced complexity is largely accidental, and thus can be avoided. To illustrate my point, I want to discuss the goal of CQRS, and then analyze 3 common sources of accidental complexity in CQRS-based systems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finding Proper Scopes for Unit Tests</title>
      <link>https://vladikk.com/2016/06/29/test-scopes/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2016/06/29/test-scopes/</guid>
      <description>&lt;p&gt;In my previous &lt;strike&gt;rant&lt;/strike&gt; &lt;a href=&#34;http://vladikk.com/2016/01/22/tdd-what-went-wrong/&#34;&gt;post on TDD&lt;/a&gt; I‚Äôve argued that the majority of the problems many experience doing TDD are caused by testing in too narrow scopes - using classes as units of testability, instead of functional use cases. However, widening the scope of the test too much is just another extreme. So how one finds the sweet spot? In this post I‚Äôd like to share the heuristic that I use.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tackling Complexity in the Heart of DDD</title>
      <link>https://vladikk.com/2016/04/05/tackling-complexity-ddd/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2016/04/05/tackling-complexity-ddd/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/ddd/title-img.jpg&#34; alt=&#34;Tackling Complexity in the Heart of Domain-Driven Design&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs do a little experiment: try to explain the gist of Domain-Driven Design to someone who has no clue about it. This, especially doing it succinctly, is not easy. Heck, I struggle with it myself. Bounded contexts, entities, domain events, value objects, domains, aggregates, repositories‚Ä¶ where do you even start?&lt;/p&gt;

&lt;p&gt;To find the order in the apparent chaos, I want to analyze the DDD methodology from a rather unusual perspective ‚Äî by applying Domain-Driven Design to Domain-Driven Design itself. After all, this methodology is intended to deal with complex domains, isn‚Äôt it?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>