<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts Ddd Architecture on Vladikk</title>
    <link>http://www.vladikk.com/categories/thoughts-ddd-architecture/</link>
    <description>Recent content in Thoughts Ddd Architecture on Vladikk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vladik Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vladik Khononov)</webMaster>
    <lastBuildDate>Tue, 05 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.vladikk.com/categories/thoughts-ddd-architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tackling Complexity in the Heart of DDD</title>
      <link>http://www.vladikk.com/2016/04/05/tackling-complexity-ddd/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/04/05/tackling-complexity-ddd/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.vladikk.com/images/ddd/title-img.jpg&#34; alt=&#34;Tackling Complexity in the Heart of Domain-Driven Design&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a little experiment: try to explain the gist of Domain-Driven Design to someone who has no clue about it. This, especially doing it succinctly, is not easy. Heck, I struggle with it myself. Bounded contexts, entities, domain events, value objects, domains, aggregates, repositories… where do you even start?&lt;/p&gt;

&lt;p&gt;To find the order in the apparent chaos, I want to analyze the DDD methodology from a rather unusual perspective — by applying Domain-Driven Design to Domain-Driven Design itself. After all, this methodology is intended to deal with complex domains, isn’t it?&lt;/p&gt;

&lt;p&gt;Let’s start by identifying the core domain: what is DDD’s main competitive advantage, and what are its means of achieving it?&lt;/p&gt;

&lt;h2 id=&#34;the-core-domain-ubiquitous-language&#34;&gt;The Core Domain: Ubiquitous Language&lt;/h2&gt;

&lt;p&gt;In &amp;ldquo;Domain-Driven Design: Tackling Complexity in the Heart of Software&amp;rdquo;(the Blue Book), Eric Evans argues that poor collaboration between domain experts and software development teams causes many development endeavors to fail. DDD aims to increase the success rates by bridging this collaboration and communication gap.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>