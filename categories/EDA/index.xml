<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EDA on Rants on Software Design</title>
    <link>https://vladikk.com/categories/EDA/</link>
    <description>Recent content in EDA on Rants on Software Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vlad Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vlad Khononov)</webMaster>
    <lastBuildDate>Sat, 29 Mar 2025 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vladikk.com/categories/EDA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Golden Age of Modularity</title>
      <link>https://vladikk.com/2025/03/30/golden-age-of-modularity/</link>
      <pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2025/03/30/golden-age-of-modularity/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/ai-boundaries.png&#34; alt=&#34;The Golden Age of Modularity: Why Modern Architecture—and AI—Depend on Better Boundaries&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My news feed these days:&lt;br /&gt;
“Take a look at the app I built with zero coding skills!”&lt;br /&gt;
“50% of our code is now written by AI!”&lt;br /&gt;
“Engineering hiring freeze: AI is the future!”&lt;/p&gt;

&lt;p&gt;Alright then. Time for me to jump on the vibe coding bandwagon and share an opinion that some may categorize as a hot take.&lt;/p&gt;

&lt;p&gt;The notion of modularity was introduced to software engineering way back in the late 1960s. Today — many decades later — we&amp;rsquo;re entering the golden age of modularity. To understand why, let’s first define what modularity actually is.&lt;/p&gt;

&lt;h2 id=&#34;modularity&#34;&gt;Modularity&lt;/h2&gt;

&lt;p&gt;There are many ways to define modularity — from designing software systems as interchangeable LEGO blocks to chasing the holy grail of reusable “building blocks” meant to be plugged into anything and everything. I prefer a more practical perspective. To me, a modular design satisfies two key criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you need to change the codebase—whether to adjust existing functionality or introduce a new one—it’s crystal clear what parts of the system need to be touched. Ideally, the number of affected components should be as small as possible. Preferably, just one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you introduce a change to a modular system, you know exactly what the effect of that change will be. You can predict the system’s behavior.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part III: The Hard Basics</title>
      <link>https://vladikk.com/2024/10/13/aws-eda-iii/</link>
      <pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/13/aws-eda-iii/</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;https://vladikk.com/2024/10/12/aws-eda-ii/&#34;&gt;previous post&lt;/a&gt; in this series discussed the reliability issues many messaging-based systems suffer from and how to address them by implementing the outbox pattern. This post switches the focus from publishing to processing messages published by other components of the system.&lt;/p&gt;

&lt;p&gt;As before, I will start by defining the problem we have to tackle.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Let’s revisit the outbox pattern once more. It addresses the common problem of publishing messages after the underlying business transaction has already been committed: the events might not get published at all. By implementing the pattern, you ensure that all the events will be published—&lt;em&gt;at least once&lt;/em&gt;. Let me explain the last part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/aws-eda-2/fig-1.png&#34; alt=&#34;The outbox pattern&#34; /&gt;
&lt;em&gt;Figure 1: The outbox pattern&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part II: The Advanced Basics</title>
      <link>https://vladikk.com/2024/10/12/aws-eda-ii/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/12/aws-eda-ii/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://vladikk.com/2024/09/28/aws-eda/&#34;&gt;previous post in the series&lt;/a&gt;, I discussed the basic building blocks for implementing event-driven architecture (EDA) using AWS managed services. This post is about the &lt;em&gt;advanced&lt;/em&gt; basics. It’s advanced because, based on my consulting experience, very few companies apply the practices I want to discuss. However, I still consider this as basics because these practices are not optional but essential for implementing reliable messaging-based systems.&lt;/p&gt;

&lt;p&gt;Although the examples in this post use AWS services, the material applies to any system, regardless of the infrastructure it runs on. The implementation might differ, but the underlying principles remain the same.&lt;/p&gt;

&lt;p&gt;Since this post is about a pattern—and patterns, by definition, are repeatable solutions to commonly occurring problems—I want to begin by discussing a commonly overlooked problem in EDA-based systems.&lt;/p&gt;

&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;In the previous post, I suggested using AWS SNS for publishing messages in an event-driven system. Here’s a common example of how such publishing is carried out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...

sns.publish(
    TopicArn=users_topic_arn,
    Message=json.dumps({
        &#39;event_type&#39;: &#39;user_registered&#39;,
        &#39;event_id&#39;: str(uuid.uuid4()),
        &#39;user_id&#39;: &#39;USER12345&#39;,
        &#39;name&#39;: &#39;John Doe&#39;,
        &#39;email&#39;: &#39;john.doe@example.com&#39;,
        &#39;source&#39;: &#39;mobile_app&#39;,
        &#39;registration_date&#39;: &#39;2024-10-11T20:01:00Z&#39;
    })
)

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, an event of type &lt;code&gt;user_registered&lt;/code&gt; is published to an SNS topic. But did that event come from thin air? Is that all services do, just publish messages? Of course not. The event is part of a larger business process that typically involves updating some state in an operational database before notifying external components about it. A more accurate representation of this process would look like this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture on AWS, Part I: The Basics</title>
      <link>https://vladikk.com/2024/09/28/aws-eda/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/09/28/aws-eda/</guid>
      <description>&lt;p&gt;The abundance of services provided by AWS often makes it possible to implement the same functionality in different ways. In the case of messaging systems, AWS offers services such as Simple Notification Service (SNS), Simple Queue Service (SQS), EventBridge, Kinesis, and Managed Streaming for Apache Kafka (MSK). It may seem that at least a subset of these services duplicates the same functionality. In this post, I want to describe my go-to architecture and explain why, in my opinion, it is the simplest, most cost-effective, and robust solution for the majority of cases.&lt;/p&gt;

&lt;h2 id=&#34;event-driven-architecture&#34;&gt;Event-Driven Architecture&lt;/h2&gt;

&lt;p&gt;Components of an event-driven system communicate by publishing and subscribing to events. The asynchronous integration offers significant non-functional advantages. For example, it decouples the integrated components’ lifecycles. To a certain degree, the system can keep functioning even in the face of unavailability of some of its services, thus also reducing the coordination overhead needed to deploy updated components, and to evolve the system.&lt;/p&gt;

&lt;p&gt;A basic event-driven integration is comprised of two parts: a component of the system can publish events describing important occurrences in its lifecycle, and it can react (subscribe) to events published by other parts of the system. Let’s see what managed services we can leverage for implementing this.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>