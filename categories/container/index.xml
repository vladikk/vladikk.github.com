<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on Vladikk</title>
    <link>http://www.vladikk.com/categories/container/</link>
    <description>Recent content in Container on Vladikk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vladik Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vladik Khononov)</webMaster>
    <lastBuildDate>Thu, 23 Aug 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.vladikk.com/categories/container/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Disposing Objects Created by DI Container</title>
      <link>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/</link>
      <pubDate>Thu, 23 Aug 2012 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/</guid>
      <description>&lt;p&gt;The general rule says that if you created an object, then it is your responsibility to dispose it. Things get a bit tricky when objects are created by a dependency injection container. The responsibility of containers is to construct objects and inject the dependencies they need. An error I’ve seen people doing again and again is to dispose objects that were injected into an object via constructor or property injection. Consider the class “Foo” that requires an instance of class “Bar”:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class Foo : IDisposable {  
    protected Bar bar;  
    public Foo(Bar bar) {  
        this.bar = bar;  
    }  
    public void Dispose() {  
        bar.Dispose();  
    }  
}  

public class Program {  
    static void Main() {  
        var foo = container.Resolve&amp;lt;Foo&amp;gt;();  
        ...  
        foo.Dispose();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this approach is that the “Foo” class will know too much about the environment it runs in. At least it will think it does. An instance of “Foo” can’t and shouldn’t know who passed in the instance of “Bar”, and what he intends to do with it after the instance of “Foo” will be disposed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>