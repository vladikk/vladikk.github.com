<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coupling on Rants on Software Design</title>
    <link>https://vladikk.com/categories/Coupling/</link>
    <description>Recent content in Coupling on Rants on Software Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vlad Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vlad Khononov)</webMaster>
    <lastBuildDate>Wed, 09 Oct 2024 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vladikk.com/categories/Coupling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Essence of Coupling and Cohesion in Under 500 Words</title>
      <link>https://vladikk.com/2024/10/09/coupling-and-cohesion/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/09/coupling-and-cohesion/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/strength-and-distance.png&#34; alt=&#34;Integration Strength and Distance&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you couple two components, they need to share some form of knowledge: public interfaces, functional behavior, implementation details, or other types of information. Let‚Äôs call it the integration strength. The more knowledge is shared, the stronger the integration. The stronger the integration, the more both components will have to change together. Therefore, you should always look to minimize the integration strength. That said, minimizing integration strength isn‚Äôt always possible‚Äîsometimes, extensive shared knowledge is necessary. For example, when the components implement closely related business functionalities.&lt;/p&gt;

&lt;p&gt;Another important property of integrated components is the distance between them. For example, objects in a module are located closer to each other than the source code of two microservices. The greater the distance, the higher the induced cognitive load and coordination challenges, and the more effort is needed to change the integrated components simultaneously.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs examine four extreme combinations of the two dimensions:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Balancing Coupling in Software Designüéâ</title>
      <link>https://vladikk.com/2024/10/08/lddd-bcisd/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vlad Khononov)</author>
      <guid>https://vladikk.com/2024/10/08/lddd-bcisd/</guid>
      <description>&lt;p&gt;Frist of all, today is the üêí book‚Äôs birthday! üéâ&lt;/p&gt;

&lt;p&gt;Exactly three years ago, &lt;em&gt;Learning Domain-Driven Design&lt;/em&gt; was published! And what a birthday present the monkey received: today marks the official release of &lt;em&gt;Balancing Coupling in Software Design&lt;/em&gt;! The new book is available in print and electronic formats on &lt;a href=&#34;https://amzn.to/3BIIPyk&#34;&gt;Amazon&lt;/a&gt;, &lt;a href=&#34;https://click.linksynergy.com/deeplink?id=XLXvHJZS*qY&amp;amp;mid=24808&amp;amp;murl=https%3A%2F%2Fwww.informit.com%2Fstore%2Fbalancing-coupling-in-software-design-universal-design-9780137353484&#34;&gt;InformIT&lt;/a&gt;, and other major book stores üéâ&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vladikk.com/images/lddd-three-years.png&#34; alt=&#34;Learning Domain-Driven Design&#39;s third anniversary&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>