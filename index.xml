<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vladikk</title>
    <link>http://www.vladikk.com/</link>
    <description>Recent content on Vladikk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>vladik@khononov.com (Vladik Khononov)</managingEditor>
    <webMaster>vladik@khononov.com (Vladik Khononov)</webMaster>
    <lastBuildDate>Fri, 26 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.vladikk.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DDD: Revisiting The Basics</title>
      <link>http://www.vladikk.com/2018/01/26/ddd-subdomains-revisited/</link>
      <pubDate>Fri, 26 Jan 2018 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2018/01/26/ddd-subdomains-revisited/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.vladikk.com/images/domains/title-img.jpg&#34; alt=&#34;DDD: Subdomains Revisited&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I have quite a few friends in the DDD community. Fortunately, or not, we always tend to disagree on the definitions of such basic terms as Domains and Subdomains. In this post, I want to think aloud and outline my thoughts on the subject.&lt;/p&gt;

&lt;h2 id=&#34;disclaimer&#34;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;As I just said, some of the things I’m about to write are my opinion only. Many of you might disagree with some of them. Hey – the last time we spoke about it, Eric and Vaughn were not fans of my theory. But, nevertheless, it is based on my 7-year long DDD journey at our company, and it works for me. Most importantly, I believe it might work for you as well.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bounded Contexts are NOT Microservices</title>
      <link>http://www.vladikk.com/2018/01/21/bounded-contexts-vs-microservices/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2018/01/21/bounded-contexts-vs-microservices/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.vladikk.com/images/bc-ms/rebel-scum.jpg&#34; alt=&#34;Rebel scum&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve always considered Domain-Driven Design’s Bounded Context as a guideline for defining the boundaries of Microservices. I was wrong. Not only is this heuristic flawed, but Bounded Contexts are the exact opposite of Microservices! To explain this point of view, I’ll start with a quick refresh of what Bounded Contexts are; then I’ll discuss the relationship between Bounded Contexts and Microservices.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apache NiFi: Enabling Unicode Support</title>
      <link>http://www.vladikk.com/2017/03/30/nifi-unicode/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2017/03/30/nifi-unicode/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using Apache NiFi to move data around, you might stumble upon Unicode characters turning into question marks. For example, the ExecuteSQL processor does that. To fix this you have to set JVM&amp;rsquo;s default encoding to UTF-8.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tackling Complexity in CQRS</title>
      <link>http://www.vladikk.com/2017/03/20/tackling-complexity-in-cqrs/</link>
      <pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2017/03/20/tackling-complexity-in-cqrs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.vladikk.com/images/cqrs/title-img.jpg&#34; alt=&#34;Tackling Complexity in CQRS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The CQRS pattern can do wonders: it can maximize scalability, performance, security, and even &lt;a href=&#34;http://codebetter.com/gregyoung/2010/02/20/cqrs-and-cap-theorem/&#34;&gt;“beat” the CAP theorem&lt;/a&gt;. Nonetheless, CQRS has acquired a controversial name because of the complexity it introduces. For instance, &lt;a href=&#34;https://martinfowler.com/bliki/CQRS.html&#34;&gt;in his article on CQRS&lt;/a&gt;, Martin Fowler argues that the pattern should be applied sparingly and even cautiously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“… for most systems CQRS adds risky complexity”&lt;/li&gt;
&lt;li&gt;“… you should be very cautious about using CQRS”&lt;/li&gt;
&lt;li&gt;“So while CQRS is a pattern that&amp;rsquo;s good to have in the toolbox, beware that it is difficult to use well and you can easily chop off important bits if you mishandle it.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From my point of view, the CQRS-induced complexity is largely accidental, and thus can be avoided. To illustrate my point, I want to discuss the goal of CQRS, and then analyze 3 common sources of accidental complexity in CQRS-based systems.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finding Proper Scopes for Unit Tests</title>
      <link>http://www.vladikk.com/2016/06/29/test-scopes/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/06/29/test-scopes/</guid>
      <description>&lt;p&gt;In my previous &lt;strike&gt;rant&lt;/strike&gt; &lt;a href=&#34;http://vladikk.com/2016/01/22/tdd-what-went-wrong/&#34;&gt;post on TDD&lt;/a&gt; I’ve argued that the majority of the problems many experience doing TDD are caused by testing in too narrow scopes - using classes as units of testability, instead of functional use cases. However, widening the scope of the test too much is just another extreme. So how one finds the sweet spot? In this post I’d like to share the heuristic that I use.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tackling Complexity in the Heart of DDD</title>
      <link>http://www.vladikk.com/2016/04/05/tackling-complexity-ddd/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/04/05/tackling-complexity-ddd/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://www.vladikk.com/images/ddd/title-img.jpg&#34; alt=&#34;Tackling Complexity in the Heart of Domain-Driven Design&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a little experiment: try to explain the gist of Domain-Driven Design to someone who has no clue about it. This, especially doing it succinctly, is not easy. Heck, I struggle with it myself. Bounded contexts, entities, domain events, value objects, domains, aggregates, repositories… where do you even start?&lt;/p&gt;

&lt;p&gt;To find the order in the apparent chaos, I want to analyze the DDD methodology from a rather unusual perspective — by applying Domain-Driven Design to Domain-Driven Design itself. After all, this methodology is intended to deal with complex domains, isn’t it?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Quick and Dirty Hack for Interviewing Job Candidates</title>
      <link>http://www.vladikk.com/2016/03/05/interviewing/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/03/05/interviewing/</guid>
      <description>&lt;p&gt;One simple question can shed a lot of light on one’s competency in a given field: &amp;ldquo;On a scale of 1 to 10, please rate your knowledge of [enter-name-of-the-field-here]&amp;ldquo;.&lt;/p&gt;

&lt;p&gt;One can assume that the higher the grade, the better. But that’s not the case at all. Why? Science — that’s why. Enter the Dunning-Kruger effect.&lt;/p&gt;

&lt;h2 id=&#34;the-dunning-kruger-effect&#34;&gt;The Dunning-Kruger Effect&lt;/h2&gt;

&lt;p&gt;The Dunning-Kruger effect is a cognitive bias that suggests that one cannot objectively assess one&amp;rsquo;s own abilities. It’s all about the unknowns — things that you don’t know — and whether you&amp;rsquo;re aware of them.&lt;/p&gt;

&lt;p&gt;The less expertise you have in a given field, the more unknown unknowns you have. You cannot objectively evaluate your knowledge, and, consequently, you are mistakenly assessing your abilities to be much higher than they actually are.&lt;/p&gt;

&lt;p&gt;This bias also works the other way around. The more expertise you have in a given field, the more known unknowns you have. This awareness of things you don&amp;rsquo;t know tricks you into making a more humbling assessment of your abilities.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DDDEU 2016 Impressions</title>
      <link>http://www.vladikk.com/2016/02/12/dddeu-2016/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/02/12/dddeu-2016/</guid>
      <description>&lt;p&gt;Last month, I had the pleasure of attending the Domain Driven Design Europe conference in Brussels. As I’ve tweeted before, this was the best conference I’ve ever attended. In this post, I’d like to sum the things I’ve learned at the conference.&lt;/p&gt;

&lt;h2 id=&#34;it-s-not-only-about-sessions&#34;&gt;It&amp;rsquo;s Not (Only) About Sessions&lt;/h2&gt;

&lt;p&gt;It was the first time I’ve attended a conference alone. Honestly, I was afraid that my introverted side would take over, and I’d master wallflower imitation techniques between sessions. Fortunately, it didn’t happen. I felt at home the moment I left the hotel for the conference. From that moment on, and up until the very last moments of the conference, I met a lot of like-minded people from all over the world - Belgium, Denmark, Germany, Austria, UK, Poland, Italy, France, USA, Finland, Switzerland, Netherlands, Romania, Bulgaria, and even from Israel.&lt;/p&gt;

&lt;p&gt;For me, the social part, alone, was worth the trip. And don’t get me wrong, the sessions were great, but the ability to meet new friends, share experiences and ideas, and get fresh perspectives, was priceless.
And I’m yet to mention discussing Star Wars with Eric Evans, discovering that Vaughn Vernon knows Israel better than I do, catching up with Greg Young, and last but not least, drinking beer with Yves Reynhout — it is unbelievable how much I learned from Yves that evening.&lt;/p&gt;

&lt;p&gt;Lesson learned: Go to conferences alone and meet new people.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD: What Went Wrong…Or Did It?</title>
      <link>http://www.vladikk.com/2016/01/22/tdd-what-went-wrong/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2016/01/22/tdd-what-went-wrong/</guid>
      <description>&lt;p&gt;Test Driven Development has been praised by our industry&amp;rsquo;s aficionados for a long time. However, lately there have been many harsh words said towards TDD, as it’s being blamed for causing bad software design and not keeping many of its promises. This trend culminated in David Heinemeierhansson’s post &lt;a href=&#34;http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html&#34;&gt;“TDD is dead. Long live testing”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How is it possible, that the same technique, which is so advantageous to so many developers, is so disastrous to others?
In this post I want to talk about 3 misconceptions that might explain this phenomenon.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with the subtlest and most destructive one.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Serving Flask with Nginx</title>
      <link>http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2013/09/12/serving-flask-with-nginx-on-ubuntu/</guid>
      <description>&lt;p&gt;Having spent the majority of my career in the Microsoft stack, lately I&amp;rsquo;ve decided to step out of my comfort zone and to dive into the world of open source software. The project I&amp;rsquo;m currently working on at my day job is a RESTful service. The service will be running on a commodity hardware, that should be able to scale horizontally as needed. To do the job I&amp;rsquo;ve decided to use Flask and Nginx. Flask is a lightweight Python web framework, and nginx is a highly stable web server, that works great on cheap hardware.&lt;/p&gt;

&lt;p&gt;In this post I will guide you through the process of installing and configuring nginx server to host Flask based applications. The OS I&amp;rsquo;ll be using is Ubuntu 13.04.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSON2CSV</title>
      <link>http://www.vladikk.com/2013/06/11/json2csv/</link>
      <pubDate>Tue, 11 Jun 2013 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2013/06/11/json2csv/</guid>
      <description>&lt;p&gt;Last week I&amp;rsquo;ve needed a utility to convert a file containing json data to csv. I found many online solutions, but for some weird reason they didn&amp;rsquo;t support nested objects and arrays. So I wrote one, this time in python.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing SQL2JSON</title>
      <link>http://www.vladikk.com/2013/06/09/sql2json/</link>
      <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2013/06/09/sql2json/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ll ever try to generate JSON file using Sql Server&amp;rsquo;s Management Studio, probably there&amp;rsquo;ll be lots of pain in your future. If you wanna save the pain, you can use SQL2JSON, an open source project I started last week.&lt;/p&gt;

&lt;p&gt;The idea was born out of a need to generate a huge JSON file containing data from MSSQL database. After seeing our DBA struggling with formatting, escaping weird characters and unicode strings, I decided to write a small utility that will do just that - execute a sql query and capture its results as a json file.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unicode file names in Python 2.7</title>
      <link>http://www.vladikk.com/2013/06/01/unicode-file-names-in-python/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2013/06/01/unicode-file-names-in-python/</guid>
      <description>&lt;p&gt;Today I wrote a small script to find and delete duplicate files. To do this task I needed to iterate over files in a specific folder, and calculate md5 checksum for each file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for folder, subs, files in os.walk(path):
    for filename in files:
        file_path = os.path.join(folder, filename)
	        with open(file_path, &#39;rb&#39;) as fh:
	        	...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the source folder contains a file or a folder with unicode characters in it, execution of the code results in this bummer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;IOError: [Errno 22] invalid mode (&#39;rb&#39;) or filename: &#39;files\\????????? ????? ????????.txt&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uncoupling Configuration Files</title>
      <link>http://www.vladikk.com/2013/05/14/uncoupling-configuration-files/</link>
      <pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2013/05/14/uncoupling-configuration-files/</guid>
      <description>&lt;p&gt;Tight coupling is a known source for inflexible and hard to test code. In this post I want to talk about a rather unexpected source of tight coupling - configuration files.
Configuration files are external dependencies. As other external dependencies, its infrastructure may change in the future, and it should be easily mocked for unit testing. Modern software frameworks provide means for easy access to the values stored in configuration files. In the .NET framework configuration files can be accessed using the ConfigurationManager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;appSettings&amp;gt;
    &amp;lt;add key=&amp;quot;Foo&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
    &amp;lt;add key=&amp;quot;Bar&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;
  &amp;lt;/appSettings&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int foo = int.Parse(ConfigurationManager.AppSetttings[“Foo”]);
int bar = int.Parse(ConfigurationManager.AppSettings[“Bar”]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ConfigurationManager makes it trivial to access data in the config file, however in most cases it also introduces various code smells that make the code tight coupled and hard to test. In the next sections I’ll introduce a simple class and will use it to demonstrate the code smells and violations of principles of clean object oriented design. The code will be gradually refactored to a better and cleaner solution.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learning From Mistakes: Leaky Abstractions</title>
      <link>http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions/</link>
      <pubDate>Mon, 15 Oct 2012 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2012/10/15/learning-from-mistakes-leaky-abstractions/</guid>
      <description>&lt;p&gt;On the project I’m working on I’ve had a requirement to store and read files
from the file system. Alse the files had to be accessible from the web.&lt;/p&gt;

&lt;p&gt;Having a gut feeling that the infrastructure may change as the business will
grow, I decided to hide operations on the file system behind an interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public interface IFilesStorage {
    string StoreFile(Stream stream, string fileName);
    Stream GetFile(string virtualPath);
    string GetFileUrl(string virtualPath);
    string GetFilePath(string virtualPath);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As it looks, if someday I’ll need to switch from the file
system to another storage mechanism, I’ll be able to do get the
job done by writing another implementation of the interface.
Right? Wrong! The requirement did come in - I’ve had to store
the files in S3. And only then I realised that IFilesStorage is
a leaky abstraction.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dependency Injection Patterns</title>
      <link>http://www.vladikk.com/2012/09/10/dependency-injection-patterns/</link>
      <pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2012/09/10/dependency-injection-patterns/</guid>
      <description>&lt;p&gt;Choosing the right pattern for implementing dependency injection is an important task and can affect your class’s usability and functionality. In this post I’ll overview 3 patterns of implementing dependency injection - constructor injection, property injection, builder (Joshua Bloch’s pattern, not GoF pattern).
For demonstration purposes we will work with a class called TextTranslator, that requires 3 dependencies: TextReader, TranslationService and TextWriter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class TextTranslator
{
    protected TextReader textReader;
    protected TranslationService translationService;
    protected TextWriter textWriter;    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample code will be written in C#, but the examples are applicable to Java and other object oriented languages.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Disposing Objects Created by DI Container</title>
      <link>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/</link>
      <pubDate>Thu, 23 Aug 2012 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/2012/08/23/disposing-objects-created-by-di-container/</guid>
      <description>&lt;p&gt;The general rule says that if you created an object, then it is your responsibility to dispose it. Things get a bit tricky when objects are created by a dependency injection container. The responsibility of containers is to construct objects and inject the dependencies they need. An error I’ve seen people doing again and again is to dispose objects that were injected into an object via constructor or property injection. Consider the class “Foo” that requires an instance of class “Bar”:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class Foo : IDisposable {  
    protected Bar bar;  
    public Foo(Bar bar) {  
        this.bar = bar;  
    }  
    public void Dispose() {  
        bar.Dispose();  
    }  
}  

public class Program {  
    static void Main() {  
        var foo = container.Resolve&amp;lt;Foo&amp;gt;();  
        ...  
        foo.Dispose();  
    }  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The problem with this approach is that the “Foo” class will know too much about the environment it runs in. At least it will think it does. An instance of “Foo” can’t and shouldn’t know who passed in the instance of “Bar”, and what he intends to do with it after the instance of “Foo” will be disposed.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://www.vladikk.com/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/page/about/</guid>
      <description>Having over 18 years of experience in the software industry, I&amp;rsquo;ve worked across multiple business domains, including advertisement, healthcare, telecommunications, and customer acquisition. Currently I serve as the Chief Architect for Internovus, where I&amp;rsquo;m in charge of large-scale projects, and an international developers team.
My main areas of interest are Domain-Driven Design, Distributed Systems, Cloud Computing and building effective teams.
When I&amp;rsquo;m not geeking out, I read lots of books, photograph nature, and repair my r/c aircrafts.</description>
    </item>
    
    <item>
      <title>Contact Me</title>
      <link>http://www.vladikk.com/page/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/page/contact/</guid>
      <description>For any type of enquiry, you can contact me via either of the methods below:
 Email: vladik at khononov.com Twitter: @vladikk Github: vladikk Facebook: vladikk Linkedin: vladikkhononov  </description>
    </item>
    
    <item>
      <title>Reading</title>
      <link>http://www.vladikk.com/page/reading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/page/reading/</guid>
      <description>A More Beautiful Question: The Power of Inquiry to Spark Breakthrough Ideas The Goal: A Process of Ongoing ImprovementBeyond the Goal: Eliyahu Goldratt Speaks on the Theory of Constraints (Your Coach In A Box)The Choice, Revised EditionDomain-Driven Design: Tackling Complexity in the Heart of SoftwareImplementing Domain-Driven DesignScrum: The Art of Doing Twice the Work in Half the TimeFlow: Living at the Peak of Your AbilitiesThe Phoenix Project: A Novel About IT, DevOps, and Helping Your Business WinSapiens: A Brief History of HumankindThe Obstacle Is the Way: The Timeless Art of Turning Trials into TriumphSimple Rules: How to Thrive in a Complex WorldGetting to Yes: Negotiating Agreement Without Giving InBorn to Run: A Hidden Tribe, Superathletes, and the Greatest Race the World Has Never SeenThe Lean Startup: How Today&amp;rsquo;s Entrepreneurs Use Continuous Innovation to Create Radically Successful BusinessesBusiness Model Generation: A Handbook for Visionaries, Game Changers, and ChallengersDrive: The Surprising Truth About What Motivates UsEnterprise Integration Patterns: Designing, Building, and Deploying Messaging SolutionsWorking Effectively with Legacy CodePatterns of Enterprise Application ArchitectureThinking, Fast and Slow</description>
    </item>
    
    <item>
      <title>Speaking</title>
      <link>http://www.vladikk.com/page/speaking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>vladik@khononov.com (Vladik Khononov)</author>
      <guid>http://www.vladikk.com/page/speaking/</guid>
      <description>18/04/2018: TestCon Moscow 2018 How to Make TDD Work Location: Moscow, Russia
Language: Russian
05/04/2018: SFI Academic IT Festival Microservices: In Search of the Perfect Boundaries Location: Kraków, Poland
Language: English
01/02/2018: DDD Europe 2018 Tackling Complexity in Marketing Systems Location: Amsterdam, Netherlands
Language: English
13/12/2017: Code Europe 7 Years of DDD: Tackling Complexity in Large-Scale Marketing Systems NDepend - Siri for Software Engineers Location: Wroclaw, Poland
Language: English</description>
    </item>
    
  </channel>
</rss>